
Hungarian algorithm
From Wikipedia, the free encyclopedia
This is the current revision of this page, as edited by 141.2.6.100 ( talk ) at 08:26, 31 August 2018 ( → ‎ The algorithm in terms of bipartite graphs ) . The present address (URL) is a permanent link to this version.
Revision as of 08:26, 31 August 2018 by 141.2.6.100 ( talk ) ( → ‎ The algorithm in terms of bipartite graphs )
( diff ) ← Previous revision  | Latest revision (diff) | Newer revision → (diff)
Jump to navigation Jump to search

The Hungarian method is a combinatorial optimization algorithm that solves the assignment problem in polynomial time and which anticipated later primal-dual methods . It was developed and published in 1955 by Harold Kuhn , who gave the name "Hungarian method" because the algorithm was largely based on the earlier works of two Hungarian mathematicians: Dénes Kőnig and Jenő Egerváry . [1] [2]

James Munkres reviewed the algorithm in 1957 and observed that it is (strongly) polynomial . [3] Since then the algorithm has been known also as the Kuhn–Munkres algorithm or Munkres assignment algorithm . The time complexity of the original algorithm was O ( n 4 ) {\displaystyle O(n^{4})} O(n^{4}) , however Edmonds and Karp , and independently Tomizawa noticed that it can be modified to achieve an O ( n 3 ) {\displaystyle O(n^{3})} O(n^{3}) running time. Ford and Fulkerson extended the method to general transportation problems. [ citation needed ] In 2006, it was discovered that Carl Gustav Jacobi had solved the assignment problem in the 19th century, and the solution had been published posthumously in 1890 in Latin. [4]
Contents

    1 Simple explanation of the assignment problem
    2 Setting
    3 The algorithm in terms of bipartite graphs
    4 Matrix interpretation
    5 Bibliography
    6 References
    7 External links

Simple explanation of the assignment problem [ edit ]

In this simple example there are three workers: Armond, Francine, and Herbert. One of them has to clean the bathroom, another sweep the floors and the third washes the windows, but they each demand different pay for the various tasks. The problem is to find the lowest-cost way to assign the jobs. The problem can be represented in a matrix of the costs of the workers doing the jobs. For example:
	Clean bathroom 	Sweep floors 	Wash windows
Armond 	$2 	$3 	$3
Francine 	$3 	$2 	$3
Herbert 	$3 	$3 	$2

The Hungarian method, when applied to the above table, would give the minimum cost: this is $6, achieved by having Armond clean the bathroom, Francine sweep the floors, and Herbert wash the windows.
Setting [ edit ]

We are given a nonnegative n × n matrix , where the element in the i -th row and j -th column represents the cost of assigning the j -th job to the i -th worker. We have to find an assignment of the jobs to the workers that has minimum cost. If the goal is to find the assignment that yields the maximum cost, the problem can be altered to fit the setting by replacing each cost with the maximum cost subtracted by the cost.

The algorithm is easier to describe if we formulate the problem using a bipartite graph. We have a complete bipartite graph G = ( S , T ; E ) {\displaystyle G=(S,T;E)} G=(S, T; E) with n {\displaystyle n} n worker vertices ( S {\displaystyle S} S ) and n {\displaystyle n} n job vertices ( T {\displaystyle T} T ), and each edge has a nonnegative cost c ( i , j ) {\displaystyle c(i,j)} c(i,j) . We want to find a perfect matching with minimum cost.

Let us call a function y : ( S ∪ T ) → R {\displaystyle y:(S\cup T)\to \mathbb {R} } {\displaystyle y:(S\cup T)\to \mathbb {R} } a potential if y ( i ) + y ( j ) ≤ c ( i , j ) {\displaystyle y(i)+y(j)\leq c(i,j)} y(i)+y(j) \leq c(i, j) for each i ∈ S , j ∈ T {\displaystyle i\in S,j\in T} i \in S, j \in T . The value of potential y {\displaystyle y} y is ∑ v ∈ S ∪ T y ( v ) {\displaystyle \sum _{v\in S\cup T}y(v)} \sum_{v\in S\cup T} y(v) . It can be seen that the cost of each perfect matching is at least the value of each potential. The Hungarian method finds a perfect matching and a potential with equal cost/value which proves the optimality of both. In fact it finds a perfect matching of tight edges : an edge i j {\displaystyle ij} ij is called tight for a potential y {\displaystyle y} y if y ( i ) + y ( j ) = c ( i , j ) {\displaystyle y(i)+y(j)=c(i,j)} y(i)+y(j) = c(i, j) . Let us denote the subgraph of tight edges by G y {\displaystyle G_{y}} G_y . The cost of a perfect matching in G y {\displaystyle G_{y}} G_y (if there is one) equals the value of y {\displaystyle y} y .
The algorithm in terms of bipartite graphs [ edit ]

During the algorithm we maintain a potential y and an orientation of G y {\displaystyle G_{y}} G_y (denoted by G y → {\displaystyle {\overrightarrow {G_{y}}}} \overrightarrow{G_y} ) which has the property that the edges oriented from T to S form a matching M . Initially, y is 0 everywhere, and all edges are oriented from S to T (so M is empty). In each step, either we modify y so that its value increases, or modify the orientation to obtain a matching with more edges. We maintain the invariant that all the edges of M are tight. We are done if M is a perfect matching.

In a general step, let R S ⊆ S {\displaystyle R_{S}\subseteq S} R_S \subseteq S and R T ⊆ T {\displaystyle R_{T}\subseteq T} R_T \subseteq T be the vertices not covered by M (so R S {\displaystyle R_{S}} R_{S} consists of the vertices in S with no incoming edge and R T {\displaystyle R_{T}} R_T consists of the vertices in T with no outgoing edge). Let Z {\displaystyle Z} Z be the set of vertices reachable in G y → {\displaystyle {\overrightarrow {G_{y}}}} \overrightarrow{G_y} from R S {\displaystyle R_{S}} R_{S} by a directed path only following edges that are tight. This can be computed by breadth-first search .

If R T ∩ Z {\displaystyle R_{T}\cap Z} R_T \cap Z is nonempty, then reverse the orientation of a directed path in G y → {\displaystyle {\overrightarrow {G_{y}}}} \overrightarrow{G_y} from R S {\displaystyle R_{S}} R_{S} to R T {\displaystyle R_{T}} R_T . Thus the size of the corresponding matching increases by 1.

If R T ∩ Z {\displaystyle R_{T}\cap Z} R_T \cap Z is empty, then let Δ := min { c ( i , j ) − y ( i ) − y ( j ) : i ∈ Z ∩ S , j ∈ T ∖ Z } {\displaystyle \Delta :=\min\{c(i,j)-y(i)-y(j):i\in Z\cap S,j\in T\setminus Z\}} \Delta := \min \{c(i,j)-y(i)-y(j): i \in Z \cap S, j \in T \setminus Z\} . Δ {\displaystyle \Delta } \Delta is positive because there are no tight edges between Z ∩ S {\displaystyle Z\cap S} Z \cap S and T ∖ Z {\displaystyle T\setminus Z} T \setminus Z . Increase y by Δ {\displaystyle \Delta } \Delta on the vertices of Z ∩ S {\displaystyle Z\cap S} Z \cap S and decrease y by Δ {\displaystyle \Delta } \Delta on the vertices of Z ∩ T {\displaystyle Z\cap T} Z \cap T . The resulting y is still a potential. The graph G y {\displaystyle G_{y}} G_y changes, but it still contains M . We orient the new edges from S to T . By the definition of Δ {\displaystyle \Delta } \Delta the set Z of vertices reachable from R S {\displaystyle R_{S}} R_{S} increases (note that the number of tight edges does not necessarily increase).

We repeat these steps until M is a perfect matching, in which case it gives a minimum cost assignment. The running time of this version of the method is O ( n 4 ) {\displaystyle O(n^{4})} O(n^{4}) : M is augmented n times, and in a phase where M is unchanged, there are at most n potential changes (since Z increases every time). The time sufficient for a potential change is O ( n 2 ) {\displaystyle O(n^{2})} O(n^{2}) .
Matrix interpretation [ edit ]

Given n {\displaystyle n} n workers and tasks, and an n × n matrix containing the cost of assigning each worker to a task, find the cost minimizing assignment.

First the problem is written in the form of a matrix as given below

    a1 	a2 	a3 	a4
    b1 	b2 	b3 	b4
    c1 	c2 	c3 	c4
    d1 	d2 	d3 	d4

where a, b, c and d are the workers who have to perform tasks 1, 2, 3 and 4. a1, a2, a3, a4 denote the penalties incurred when worker "a" does task 1, 2, 3, 4 respectively. The same holds true for the other symbols as well. The matrix is square, so each worker can perform only one task.

Step 1

Then we perform row operations on the matrix. To do this, the lowest of all a i (i belonging to 1-4) is taken and is subtracted from each element in that row. This will lead to at least one zero in that row (We get multiple zeros when there are two equal elements which also happen to be the lowest in that row). This procedure is repeated for all rows. We now have a matrix with at least one zero per row. Now we try to assign tasks to agents such that each agent is doing only one task and the penalty incurred in each case is zero. This is illustrated below.

    0 	a2' 	a3' 	a4'
    b1' 	b2' 	b3' 	0
    c1' 	0 	c3' 	c4'
    d1' 	d2' 	0 	d4'

The zeros that are indicated as 0 are the assigned tasks.

Step 2

Sometimes it may turn out that the matrix at this stage cannot be used for assigning, as is the case for the matrix below.

    0 	a2' 	a3' 	a4'
    b1' 	b2' 	b3' 	0
    0 	c2' 	c3' 	c4'
    d1' 	0 	d3' 	d4'

In the above case, no assignment can be made. Note that task 1 is done efficiently by both agent a and c. Both can't be assigned the same task. Also note that no one does task 3 efficiently. To overcome this, we repeat the above procedure for all columns (i.e. the minimum element in each column is subtracted from all the elements in that column) and then check if an assignment is possible.

In most situations this will give the result, but if it is still not possible then we need to keep going.

Step 3

All zeros in the matrix must be covered by marking as few rows and/or columns as possible. The following procedure is one way to accomplish this:

First, assign as many tasks as possible.

    Row 1 has one zero, so it is assigned. The 0 in row 3 is crossed out because it is in the same column.
    Row 2 has one zero, so it is assigned.
    Row 3's only zero has been crossed out, so nothing is assigned.
    Row 4 has two uncrossed zeros. Either one can be assigned (both are optimum), and the other zero would be crossed out.

Alternatively, the 0 in row 3 may be assigned, causing the 0 in row 1 to be crossed instead.

    0' 	a2' 	a3' 	a4'
    b1' 	b2' 	b3' 	0'
    0 	c2' 	c3' 	c4'
    d1' 	0' 	0 	d4'

Now to the drawing part.

    Mark all rows having no assignments (row 3).
    Mark all (unmarked) columns having zeros in newly marked row(s) (column 1).
    Mark all rows having assignments in newly marked columns (row 1).
    Repeat for all non-assigned rows.

    × 				
    0' 	a2' 	a3' 	a4' 	×
    b1' 	b2' 	b3' 	0' 	
    0 	c2' 	c3' 	c4' 	×
    d1' 	0' 	0 	d4' 	

Now draw lines through all marked columns and unmarked rows.

    × 				
    0' 	a2' 	a3' 	a4' 	×
    b1' 	b2' 	b3' 	0'
    0 	c2' 	c3' 	c4' 	×
    d1' 	0' 	0 	d4'

The aforementioned detailed description is just one way to draw the minimum number of lines to cover all the 0s. Other methods work as well.

Step 4

From the elements that are left, find the lowest value. Subtract this from every unmarked element and add it to every element covered by two lines.

Repeat steps 3–4 until an assignment is possible; this is when the minimum number of lines used to cover all the 0s is equal to max(number of people, number of assignments), assuming dummy variables (usually the max cost) are used to fill in when the number of people is greater than the number of assignments.

Basically you find the second minimum cost among the remaining choices. The procedure is repeated until you are able to distinguish among the workers in terms of least cost.
Bibliography [ edit ]

    R.E. Burkard, M. Dell'Amico, S. Martello: Assignment Problems (Revised reprint). SIAM, Philadelphia (PA.) 2012. ISBN   978-1-61197-222-1
    M. Fischetti, "Lezioni di Ricerca Operativa", Edizioni Libreria Progetto Padova, Italia, 1995.
    R. Ahuja , T. Magnanti , J. Orlin , "Network Flows", Prentice Hall, 1993.
    S. Martello, "Jeno Egerváry: from the origins of the Hungarian algorithm to satellite communication". Central European Journal of Operations Research 18, 47–58, 2010

References [ edit ]

    Jump up ^ Harold W. Kuhn, "The Hungarian Method for the assignment problem", Naval Research Logistics Quarterly , 2 : 83–97, 1955. Kuhn's original publication.
    Jump up ^ Harold W. Kuhn, "Variants of the Hungarian method for assignment problems", Naval Research Logistics Quarterly , 3 : 253–258, 1956.
    Jump up ^ J. Munkres, "Algorithms for the Assignment and Transportation Problems", Journal of the Society for Industrial and Applied Mathematics , 5 (1):32–38, 1957 March.
    Jump up ^ http://www.lix.polytechnique.fr/~ollivier/JACOBI/jacobiEngl.htm

External links [ edit ]

    Bruff, Derek, "The Assignment Problem and the Hungarian Method", [1]
    Mordecai J. Golin, Bipartite Matching and the Hungarian Method , Course Notes, Hong Kong University of Science and Technology .
    R. A. Pilgrim , Munkres' Assignment Algorithm. Modified for Rectangular Matrices , Course notes, Murray State University .
    Mike Dawes , The Optimal Assignment Problem , Course notes, University of Western Ontario .
    On Kuhn's Hungarian Method – A tribute from Hungary , András Frank , Egervary Research Group, Pazmany P. setany 1/C, H1117, Budapest, Hungary.
    Lecture: Fundamentals of Operations Research - Assignment Problem - Hungarian Algorithm , Prof. G. Srinivasan, Department of Management Studies, IIT Madras.
    Extension: Assignment sensitivity analysis (with O(n^4) time complexity) , Liu, Shell.
    Solve any Assignment Problem online , provides a step by step explanation of the Hungarian Algorithm.

    Implementations
    Note that not all of these satisfy the O ( n 3 ) {\displaystyle O(n^{3})} O(n^{3}) time constraint. show C implementation with O ( n 3 ) {\displaystyle O(n^{3})} O(n^{3}) time complexity 	
    Java implementation of O ( n 3 ) {\displaystyle O(n^{3})} O(n^{3}) time variant 	
    Java implementation of O ( n 3 ) {\displaystyle O(n^{3})} O(n^{3}) time variant by Shawn T. O'Neil 	
    Python implementation 	
    Ruby implementation with unit tests 	
    C# implementation with O ( n 3 ) {\displaystyle O(n^{3})} O(n^{3}) time complexity 	
    D implementation with unit tests (port of the Java O ( n 3 ) {\displaystyle O(n^{3})} O(n^{3}) version) 	
    Online interactive implementation 	
    Graphical implementation with options ( Java applet ) 	
    Serial and parallel implementations. 	
    Matlab and C 	
    Perl implementation 	
    C++ (STL) implementation (multi-functional bipartite graph version) 	
    C++ implementation 	
    C++ implementation of the O ( n 3 ) {\displaystyle O(n^{3})} O(n^{3}) algorithm (BSD style open source licensed) 	
    Java implementation with JUnit tests (Apache 2.0) 	
    MATLAB implementation 	
    C implementation 	
    JavaScript implementation with unit tests (port of the Java O ( n 3 ) {\displaystyle O(n^{3})} O(n^{3}) version) 	
    Clue R package proposes an implementation, solve_LSAP 	
    Node.js implementation on GitHub 	
    Python implementation in scipy package 	

Retrieved from " https://en.wikipedia.org/w/index.php?title=Hungarian_algorithm&oldid=857375568 "
Categories :

    Matching
    Combinatorial optimization

Hidden categories:

    All articles with unsourced statements
    Articles with unsourced statements from November 2017
    Use dmy dates from September 2010

Navigation menu
Personal tools

    Not logged in
    Talk
    Contributions
    Create account
    Log in

Namespaces

    Article
    Talk

Variants

Views

    Read
    Edit
    View history

More

Search
Navigation

    Main page
    Contents
    Featured content
    Current events
    Random article
    Donate to Wikipedia
    Wikipedia store

Interaction

    Help
    About Wikipedia
    Community portal
    Recent changes
    Contact page

Tools

    What links here
    Related changes
    Upload file
    Special pages
    Permanent link
    Page information
    Wikidata item
    Cite this page

Print/export

    Create a book
    Download as PDF
    Printable version

Languages

    Català
    Deutsch
    Español
    فارسی
    Français
    Հայերեն
    Bahasa Indonesia
    Italiano
    Magyar
    Nederlands
    Polski
    Русский
    Српски / srpski
    ไทย
    Українська
    中文

Edit links

    This page was last edited on 31 August 2018, at 08:26  (UTC) .
    Text is available under the Creative Commons Attribution-ShareAlike License ; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc. , a non-profit organization.

    Privacy policy
    About Wikipedia
    Disclaimers
    Contact Wikipedia
    Developers
    Cookie statement
    Mobile view

    Wikimedia Foundation
    Powered by MediaWiki

