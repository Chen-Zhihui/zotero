
Skip to content
This repository

    Pull requests
    Issues
    Marketplace
    Explore

        New repository Import repository New gist New organization
        This repository
        New issue 
    @Chen-Zhihui
        Signed in as Chen-Zhihui
        Your profile
        Your stars
        Your gists
        Help
        Settings
        Sign out

Sign out

    Watch 98
    Notifications
    Not watching Be notified when participating or @mentioned. Watch
    Watching Be notified of all conversations. Unwatch
    Ignoring Never be notified. Stop ignoring
    Unstar 821
    Star 821
    Fork
    Where should we fork this repository?
    Loading
    269

deepinsight / insightface
Code Issues 13 Pull requests 3 Projects 0 Wiki Insights
Face Recognition Project on MXNet
face-recognition mxnet

    305 commits
    1 branch
    0 releases
    3 contributors
    MIT

    Python 99.8%
    Shell 0.2%

Python Shell
Clone or download
Use SSH
Clone with HTTPS

Use Git or checkout with SVN using the web URL.
Use HTTPS
Clone with SSH

Use an SSH key and passphrase from account.
Download ZIP
Launching GitHub Desktop ...

If nothing happens, download GitHub Desktop and try again.

Go back
Launching GitHub Desktop ...

If nothing happens, download GitHub Desktop and try again.

Go back
Launching Xcode ...

If nothing happens, download Xcode and try again.

Go back
Launching Visual Studio ...

If nothing happens, download the GitHub extension for Visual Studio and try again.

Go back
Create new file
Upload files Find file
Branch: master
Switch branches/tags

    Branches
    Tags

master
Nothing to show
Nothing to show
New pull request
Fetching latest commit…
Cannot retrieve the latest commit at this time.
Permalink
	Failed to load latest commit information.
	3rdparty/ operator 	tiny 	Jan 10, 2018
	alignment3d 	alignment3d init 	Feb 5, 2018
	datasets 	add datasets dir 	Jan 24, 2018
	deploy 	fix model_slim 	Jan 30, 2018
	models 	add deployment 	Jan 26, 2018
	resources 	updatereadme 	Mar 23, 2018
	src 	code clean 	Mar 14, 2018
	.gitignore 	Initial commit 	Sep 1, 2017
	LICENSE 	add license 	Jan 24, 2018
	README.md 	updatereadme 	Mar 23, 2018
README.md
InsightFace: 2D and 3D Face Analysis Project

By Jia Guo and Jiankang Deng
License

The code of InsightFace is released under the MIT License.
Recent Update

2018.02.13 : We achieved state-of-the-art performance on MegaFace-Challenge . Please check our paper and code for implementation details.
Contents

Deep Face Recognition

    Introduction
    Training Data
    Train
    Pretrained Models
    Test on MegaFace
    512-D Feature Embedding
    Third-party Re-implementation

Face Alignment

Face Detection

Citation

Contact
Deep Face Recognition
Introduction

In this repository, we provide training data, network settings and loss designs for deep face recognition. The training data includes the normalised MS1M and VGG2 datasets, which were already packed in the MxNet binary format. The network backbones include ResNet, InceptionResNet_v2, DenseNet, DPN and MobiletNet. The loss functions include Softmax, SphereFace, CosineFace, ArcFace and Triplet (Euclidean/Angular) Loss.

    loss-type=0: Softmax
    loss-type=1: SphereFace
    loss-type=2: CosineFace
    loss-type=4: ArcFace (Our Method)
    loss-type=12: TripletLoss

margin penalty for target logit

Our method, ArcFace, was initially described in an arXiv technical report . By using this repository, you can simply achieve LFW 99.80%+ and Megaface 98%+ by a single model. This repository can help researcher/engineer to develop deep face recognition algorithms quickly by only two steps: download the binary dataset and run the training script.
Training Data

All face images are aligned by MTCNN and cropped to 112x112:

    Refined-MS1M@BaiduDrive , Refined-MS1M@GoogleDrive
    VGGFace2@BaiduDrive , VGGFace2@GoogleDrive
    Please check src/data/face2rec2.py on how to build a binary face dataset. Any public available MTCNN can be used to align the faces, and the performance should not change. We will improve the face normalisation step by full pose alignment methods recently.

Note: If you use the refined MS1M dataset and the cropped VGG2 dataset, please cite the original papers.
Train

    Install MXNet with GPU support (Python 2.7).

 pip install mxnet-cu80  

    Clone the InsightFace repository. We call the directory insightface as INSIGHTFACE_ROOT .

 git clone --recursive https://github.com/deepinsight/insightface.git  

    Download the training set ( MS1M ) and place it in $INSIGHTFACE_ROOT/datasets/ . Each training dataset includes following 7 files:

     faces_ms1m_112x112/
       train.idx
       train.rec
       property
       lfw.bin
       cfp_ff.bin
       cfp_fp.bin
       agedb_30.bin

The first three files are the training dataset while the last four files are verification sets.

    Train deep face recognition models. In this part, we assume you are in the directory $INSIGHTFACE_ROOT/src/ .

 export MXNET_CPU_WORKER_NTHREADS=24 export MXNET_ENGINE_TYPE=ThreadedEnginePerDevice  

We give some examples below. Our experiments were conducted on the Tesla P40 GPU.

(1). Train ArcFace with LResNet100E-IR.

 CUDA_VISIBLE_DEVICES= ' 0,1,2,3 '   python -u train_softmax.py --network r100 --loss-type 4 --margin-m 0.5 --data-dir ../datasets/faces_ms1m_112x112  --prefix ../model-r100

It will output verification results of LFW , CFP-FF , CFP-FP and AgeDB-30 every 2000 batches. You can check all command line options in train_softmax.py . This model can achieve LFW 99.80+ and MegaFace 98.0%+ .

(2). Train CosineFace with LResNet50E-IR.

 CUDA_VISIBLE_DEVICES= ' 0,1,2,3 '   python -u train_softmax.py --network r50 --loss-type 2 --margin-m 0.35 --data-dir ../datasets/faces_ms1m_112x112 --prefix ../model-r50-amsoftmax

(3). Train Softmax with LMobileNetE.

 CUDA_VISIBLE_DEVICES= ' 0,1,2,3 '   python -u train_softmax.py --network m1 --loss-type 0 --data-dir ../datasets/faces_ms1m_112x112 --prefix ../model-m1-softmax

(4). Fine-turn the above Softmax model with Triplet loss.

 CUDA_VISIBLE_DEVICES= ' 0,1,2,3 '   python -u train_softmax.py --network m1 --loss-type 12 --lr 0.005 --mom 0.0 --per-batch-size 150 --data-dir ../datasets/faces_ms1m_112x112 --pretrained ../model-m1-softmax,50 --prefix ../model-m1-triplet

(5). Train LDPN107E network with Softmax loss on VGGFace2 dataset.

 CUDA_VISIBLE_DEVICES= ' 0,1,2,3,4,5,6,7 '   python -u train_softmax.py --network p107 --loss-type 0 --per-batch-size 64 --data-dir ../datasets/faces_vgg_112x112 --prefix ../model-p107-softmax

    Verification results.

LResNet100E-IR network trained on MS1M dataset with ArcFace loss:
Method 	LFW(%) 	CFP-FF(%) 	CFP-FP(%) 	AgeDB-30(%)
Ours 	99.80+ 	99.85+ 	94.0+ 	97.90+

LResNet50E-IR network trained on VGGFace2 dataset with ArcFace loss:
Method 	LFW(%) 	CFP-FF(%) 	CFP-FP(%) 	AgeDB-30(%)
Ours 	99.7+ 	99.6+ 	97.1+ 	95.7+

We report the verification accuracy after removing training set overlaps to strictly follow the evaluation metric. (C) means after cleaning
Dataset 	Identities 	Images 	Identites(C) 	Images(C) 	Acc 	Acc(C)
LFW 	85742 	3850179 	80995 	3586128 	99.83 	99.81
CFP-FP 	85742 	3850179 	83706 	3736338 	94.04 	94.03
AgeDB-30 	85742 	3850179 	83775 	3761329 	98.08 	97.87
Pretrained Models

You can use $INSIGHTFACE/src/eval/verification.py to test all the pre-trained models.

    LResNet50E-IR@BaiduDrive , @GoogleDrive Performance:

Method 	LFW(%) 	CFP-FF(%) 	CFP-FP(%) 	AgeDB-30(%) 	MegaFace(%)
Ours 	99.80 	99.83 	92.74 	97.76 	97.64

    LResNet34E-IR@BaiduDrive Performance:

Method 	LFW(%) 	CFP-FF(%) 	CFP-FP(%) 	AgeDB-30(%) 	MegaFace(%)
Ours 	99.65 	99.77 	92.12 	97.70 	96.70

Caffe LResNet34E-IR@BaiduDrive , converted by the above MXNet model. Performance:
Method 	LFW(%) 	CFP-FF(%) 	CFP-FP(%) 	AgeDB-30(%) 	MegaFace1M(%)
Ours 	99.46 	99.60 	87.75 	96.00 	93.29
Test on MegaFace

In this part, we assume you are in the directory $INSIGHTFACE_ROOT/src/megaface/ .

Note: We found there are overlap identities between facescrub dataset and Megaface distractors, which significantly affects the identification performance. This list is released under $INSIGHTFACE_ROOT/src/megaface/ .

    Align all face images of facescrub dataset and megaface distractors. Please check the alignment scripts under $INSIGHTFACE_ROOT/src/align/ .
    Generate feature files for both facescrub and megaface images.

 python -u gen_megaface.py  

    Remove Megaface noises which generates new feature files.

 python -u remove_noises.py  

    Run megaface development kit to produce final result.

512-D Feature Embedding

In this part, we assume you are in the directory $INSIGHTFACE_ROOT/deploy/ . The input face image should be generally centre cropped. We use RNet+ONet of MTCNN to further align the image before sending it to the feature embedding network.

    Prepare a pre-trained model.
    Put the model under $INSIGHTFACE_ROOT/models/ . For example, $INSIGHTFACE_ROOT/models/model-r34-amf .
    Run the test script $INSIGHTFACE_ROOT/deploy/test.py .

For single cropped face image(112x112), total inference time is only 17ms on our testing server(Intel E5-2660 @ 2.00GHz, Tesla M40, LResNet34E-IR ).
Third-party Re-implementation

    TensorFlow: InsightFace_TF

Face Alignment

Todo
Face Detection

Todo
Citation

If you find InsightFace useful in your research, please consider to cite the following related papers:

 @article{deng2018arcface, title={ArcFace: Additive Angular Margin Loss for Deep Face Recognition}, author={Deng, Jiankang and Guo, Jia and Zafeiriou, Stefanos}, journal={arXiv:1801.07698}, year={2018} }  

Contact

 [Jia Guo](guojia[at]gmail.com) [Jiankang Deng](jiankangdeng[at]gmail.com)  

    © 2018 GitHub , Inc.
    Terms
    Privacy
    Security
    Status
    Help

    Contact GitHub
    API
    Training
    Shop
    Blog
    About

You can't perform that action at this time.
You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session.
Press h to open a hovercard with more details.
