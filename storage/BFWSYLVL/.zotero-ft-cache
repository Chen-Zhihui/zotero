
Skip to content
This repository

    Pull requests
    Issues
    Marketplace
    Explore

        New repository Import repository New gist New organization
        This repository
        New issue 
    @Chen-Zhihui
        Signed in as Chen-Zhihui
        Your profile
        Your stars
        Your gists
        Help
        Settings
        Sign out

Sign out

    Watch 9
    Notifications
    Not watching Be notified when participating or @mentioned. Watch
    Watching Be notified of all conversations. Unwatch
    Ignoring Never be notified. Stop ignoring
    Unstar 106
    Star 106
    Fork
    Where should we fork this repository?
    Loading
    25

syrusakbary / promise
Code Issues 15 Pull requests 2 Projects 0 Wiki Insights
Ultra-performant Promise implementation in Python
promise python

    203 commits
    9 branches
    5 releases
    7 contributors
    MIT

    Python 100.0%

Python
Clone or download
Use SSH
Clone with HTTPS

Use Git or checkout with SVN using the web URL.
Use HTTPS
Clone with SSH

Use an SSH key and passphrase from account.
Download ZIP
Launching GitHub Desktop ...

If nothing happens, download GitHub Desktop and try again.

Go back
Launching GitHub Desktop ...

If nothing happens, download GitHub Desktop and try again.

Go back
Launching Xcode ...

If nothing happens, download Xcode and try again.

Go back
Launching Visual Studio ...

If nothing happens, download the GitHub extension for Visual Studio and try again.

Go back
Create new file
Upload files Find file
Branch: master
Switch branches/tags

    Branches
    Tags

async-dataloader async-scheduler await-blocked-by-context-fix better-testing-and-code dataloader features/classpromise features/no-context-and-schedulers-refactor features/typed master
Nothing to show
v2.0.1 v2.0.0 v1.0.1 v1.0 v0.4.0
Nothing to show
New pull request
Fetching latest commitâ€¦
Cannot retrieve the latest commit at this time.
Permalink
	Failed to load latest commit information.
	promise 	Release promise 2.1.0 final 	Oct 25, 2017
	tests 	Assert blocking issue is fixed. Fixed Issue #30 #33 	Jul 23, 2017
	.coveragerc 	Fixed flake8 issues 	Feb 17, 2017
	.gitignore 	First version of pypromise ðŸ˜Ž 	May 3, 2016
	.travis.yml 	Refactored schedulers 	Jul 13, 2017
	LICENSE 	First version of pypromise ðŸ˜Ž 	May 3, 2016
	README.md 	Fixed promisify 	Apr 5, 2017
	README.rst 	Fixed promisify 	Apr 5, 2017
	setup.cfg 	Improved code and type annotations 	Mar 13, 2017
	setup.py 	list six as a requirement for 2.7 compatability 	Apr 11, 2017
README.md
Promise

This is a implementation of Promises in Python. It is a super set of Promises/A+ designed to have readable, performant code and to provide just the extensions that are absolutely necessary for using promises in Python.

Its fully compatible with the Promises/A+ spec

travis pypi coveralls
Installation

 $ pip install promise  

Usage

The example below shows how you can load the promise library. It then demonstrates creating a promise from scratch. You simply call Promise(fn) . There is a complete specification for what is returned by this method in Promises/A+ .

 from  promise import  Promise

promise =  Promise(
    lambda  resolve , reject : resolve( ' RESOLVED! '  )
)

API

Before all examples, you will need:

 from  promise import  Promise

Promise(resolver)

This creates and returns a new promise. resolver must be a function. The resolver function is passed two arguments:

    resolve should be called with a single argument. If it is called with a non-promise value then the promise is fulfilled with that value. If it is called with a promise (A) then the returned promise takes on the state of that new promise (A).
    reject should be called with a single argument. The returned promise will be rejected with that argument.

Class Methods

These methods are invoked by calling Promise.methodName .
Promise.resolve(value)

Converts values and foreign promises into Promises/A+ promises. If you pass it a value then it returns a Promise for that value. If you pass it something that is close to a promise (such as a jQuery attempt at a promise) it returns a Promise that takes on the state of value (rejected or fulfilled).
Promise.reject(value)

Returns a rejected promise with the given value.
Promise.all(list)

Returns a promise for a list. If it is called with a single argument then this returns a promise for a copy of that list with any promises replaced by their fulfilled values. e.g.

 p =  Promise.all([Promise.resolve( ' a '  ), ' b '  , Promise.resolve( ' c '  )]) \
       .then( lambda  res : res ==  [ ' a '  , ' b '  , ' c '  ])

assert  p.get() is  True 

Promise.cast(obj)

This function wraps the obj act as a Promise if possible. Python Future s are supported, with a callback to promise.done when resolved. Have the same effects as Promise.resolve(obj) .
Promise.for_dict(d)

A special function that takes a dictionary of promises and turns them into a promise for a dictionary of values. In other words, this turns an dictionary of promises for values into a promise for a dictionary of values.
Promise.is_thenable(obj)

This function checks if the obj is a Promise , or could be cast ed.
Promise.promisify(func)

This function wraps the result of calling func in a Promise instance.
Instance Methods

These methods are invoked on a promise instance by calling myPromise.methodName
promise.then(did_fulfill, did_reject)

This method follows the Promises/A+ spec . It explains things very clearly so I recommend you read it.

Either did_fulfill or did_reject will be called and they will not be called more than once. They will be passed a single argument and will always be called asynchronously (in the next turn of the event loop).

If the promise is fulfilled then did_fulfill is called. If the promise is rejected then did_reject is called.

The call to .then also returns a promise. If the handler that is called returns a promise, the promise returned by .then takes on the state of that returned promise. If the handler that is called returns a value that is not a promise, the promise returned by .then will be fulfilled with that value. If the handler that is called throws an exception then the promise returned by .then is rejected with that exception.
promise.catch(did_reject)

Sugar for promise.then(None, did_reject) , to mirror catch in synchronous code.
promise.done(did_fulfill, did_reject)

The same semantics as .then except that it does not return a promise and any exceptions are re-thrown so that they can be logged (crashing the application in non-browser environments)
Contributing

After cloning this repo, ensure dependencies are installed by running:

 pip install -e " .[test] "  

After developing, the full test suite can be evaluated by running:

 py.test tests --cov=promise --benchmark-skip # Use -v -s for verbose mode 

You can also run the benchmarks with:

 py.test tests --benchmark-only

Notes

This package is heavily insipired in aplus .
License

MIT License

    Â© 2018 GitHub , Inc.
    Terms
    Privacy
    Security
    Status
    Help

    Contact GitHub
    API
    Training
    Shop
    Blog
    About

You can't perform that action at this time.
You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session.
Press h to open a hovercard with more details.
