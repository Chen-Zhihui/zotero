
PyTorch Tutorials Logo
0.4.0

Beginner Tutorials

    Deep Learning with PyTorch: A 60 Minute Blitz
        What is PyTorch?
            Getting Started
                Tensors
                Operations
            NumPy Bridge
                Converting a Torch Tensor to a NumPy Array
                Converting NumPy Array to Torch Tensor
            CUDA Tensors
        Autograd: automatic differentiation
            Tensor
            Gradients
        Neural Networks
            Define the network
            Loss Function
            Backprop
            Update the weights
        Training a classifier
            What about data?
            Training an image classifier
                1. Loading and normalizing CIFAR10
                2. Define a Convolution Neural Network
                3. Define a Loss function and optimizer
                4. Train the network
                5. Test the network on the test data
            Training on GPU
            Training on multiple GPUs
            Where do I go next?
        Optional: Data Parallelism
            Imports and parameters
            Dummy DataSet
            Simple Model
            Create Model and DataParallel
            Run the Model
            Results
                2 GPUs
                3 GPUs
                8 GPUs
            Summary
    PyTorch for former Torch users
        Tensors
            Inplace / Out-of-place
            Zero Indexing
            No camel casing
            Numpy Bridge
                Converting torch Tensor to numpy Array
                Converting numpy Array to torch Tensor
            CUDA Tensors
        Autograd
            Tensors that track history
            Gradients
        nn package
            Example 1: ConvNet
            Forward and Backward Function Hooks
            Example 2: Recurrent Net
        Multi-GPU examples
            DataParallel
            Part of the model on CPU and part on the GPU
    Learning PyTorch with Examples
        Tensors
            Warm-up: numpy
            PyTorch: Tensors
        Autograd
            PyTorch: Tensors and autograd
            PyTorch: Defining new autograd functions
            TensorFlow: Static Graphs
        nn module
            PyTorch: nn
            PyTorch: optim
            PyTorch: Custom nn Modules
            PyTorch: Control Flow + Weight Sharing
        Examples
            Tensors
                Warm-up: numpy
                PyTorch: Tensors
            Autograd
                PyTorch: Tensors and autograd
                PyTorch: Defining new autograd functions
                TensorFlow: Static Graphs
            nn module
                PyTorch: nn
                PyTorch: optim
                PyTorch: Custom nn Modules
                PyTorch: Control Flow + Weight Sharing
    Transfer Learning tutorial
        Load Data
            Visualize a few images
        Training the model
            Visualizing the model predictions
        Finetuning the convnet
            Train and evaluate
        ConvNet as fixed feature extractor
            Train and evaluate
    Data Loading and Processing Tutorial
        Dataset class
        Transforms
            Compose transforms
        Iterating through the dataset
        Afterword: torchvision
    Deep Learning for NLP with Pytorch
        Introduction to PyTorch
            Introduction to Torch’s tensor library
                Creating Tensors
                Operations with Tensors
                Reshaping Tensors
            Computation Graphs and Automatic Differentiation
        Deep Learning with PyTorch
            Deep Learning Building Blocks: Affine maps, non-linearities and objectives
                Affine Maps
                Non-Linearities
                Softmax and Probabilities
                Objective Functions
            Optimization and Training
            Creating Network Components in PyTorch
                Example: Logistic Regression Bag-of-Words classifier
        Word Embeddings: Encoding Lexical Semantics
            Getting Dense Word Embeddings
            Word Embeddings in Pytorch
            An Example: N-Gram Language Modeling
            Exercise: Computing Word Embeddings: Continuous Bag-of-Words
        Sequence Models and Long-Short Term Memory Networks
            LSTM’s in Pytorch
            Example: An LSTM for Part-of-Speech Tagging
            Exercise: Augmenting the LSTM part-of-speech tagger with character-level features
        Advanced: Making Dynamic Decisions and the Bi-LSTM CRF
            Dynamic versus Static Deep Learning Toolkits
            Bi-LSTM Conditional Random Field Discussion
            Implementation Notes
            Exercise: A new loss function for discriminative tagging

Intermediate Tutorials

    Classifying Names with a Character-Level RNN
        Preparing the Data
            Turning Names into Tensors
        Creating the Network
        Training
            Preparing for Training
            Training the Network
            Plotting the Results
        Evaluating the Results
            Running on User Input
        Exercises
    Generating Names with a Character-Level RNN
        Preparing the Data
        Creating the Network
        Training
            Preparing for Training
            Training the Network
            Plotting the Losses
        Sampling the Network
        Exercises
    Translation with a Sequence to Sequence Network and Attention
        Loading data files
        The Seq2Seq Model
            The Encoder
            The Decoder
                Simple Decoder
                Attention Decoder
        Training
            Preparing Training Data
            Training the Model
            Plotting results
        Evaluation
        Training and Evaluating
            Visualizing Attention
        Exercises
    Reinforcement Learning (DQN) tutorial
        Replay Memory
        DQN algorithm
            Q-network
            Input extraction
        Training
            Hyperparameters and utilities
            Training loop
    Writing Distributed Applications with PyTorch
        Setup
        Point-to-Point Communication
        Collective Communication
        Distributed Training
            Our Own Ring-Allreduce
        Advanced Topics
            Communication Backends
            Initialization Methods
    Spatial Transformer Networks Tutorial
        Loading the data
        Depicting spatial transformer networks
        Training the model
        Visualizing the STN results

Advanced Tutorials

    Neural Transfer with PyTorch
        Introduction
            Neural what?
            How does it work?
                OK. How does it work?
        PyTorch implementation
            Packages
            Cuda
            Load images
            Display images
            Content loss
            Style loss
            Load the neural network
            Input image
            Gradient descent
    Creating extensions using numpy and scipy
        Parameter-less example
        Parametrized example
    Transfering a model from PyTorch to Caffe2 and Mobile using ONNX
        Transfering SRResNet using ONNX
        Running the model on mobile devices
    Custom C++ and CUDA Extensions
        Motivation and Example
        Writing a C++ Extension
            Building with setuptools
            Writing the C++ Op
                Forward Pass
                Backward Pass
            Binding to Python
            Using Your Extension
                Performance Comparison
                Performance on GPU Devices
            JIT Compiling Extensions
        Writing a Mixed C++/CUDA extension
            Integrating a C++/CUDA Operation with PyTorch
                Performance Comparison
        Conclusion

PyTorch Tutorials

    Docs »
    Welcome to PyTorch Tutorials
    View page source

Welcome to PyTorch Tutorials ¶

To get started with learning PyTorch, start with our Beginner Tutorials. The 60-minute blitz is the most common starting point, and gives you a quick introduction to PyTorch. If you like learning by examples, you will like the tutorial Learning PyTorch with Examples

If you would like to do the tutorials interactively via IPython / Jupyter, each tutorial has a download link for a Jupyter Notebook and Python source code.

We also provide a lot of high-quality examples covering image classification, unsupervised learning, reinforcement learning, machine translation and many other applications at https://github.com/pytorch/examples/

You can find reference documentation for PyTorch’s API and layers at http://docs.pytorch.org or via inline help. If you would like the tutorials section improved, please open a github issue here with your feedback: https://github.com/pytorch/tutorials
Beginner Tutorials ¶

_images/pytorch-logo-flat.png

Deep Learning with PyTorch: A 60 Minute Blitz

_images/torch-logo.png

PyTorch for former Torch users

_images/examples.png

Learning PyTorch with Examples

_images/sphx_glr_transfer_learning_tutorial_thumb.png

Transfer Learning tutorial

_images/sphx_glr_data_loading_tutorial_thumb.png

Data Loading and Processing Tutorial

_images/babel.jpg

Deep Learning for NLP with Pytorch

Intermediate Tutorials ¶

_images/sphx_glr_char_rnn_classification_tutorial_thumb.png

Classifying Names with a Character-Level RNN

_images/char_rnn_generation.png

Generating Names with a Character-Level RNN

_images/seq2seq_flat.png

Translation with a Sequence to Sequence Network and Attention

_images/cartpole.gif

Reinforcement Learning (DQN) tutorial

_images/DistPyTorch.jpg

Writing Distributed Applications with PyTorch

_images/sphx_glr_spatial_transformer_tutorial_thumb.png

Spatial Transformer Networks Tutorial

Advanced Tutorials ¶

_images/sphx_glr_neural_style_tutorial_thumb.png

Neural Transfer with PyTorch

_images/sphx_glr_numpy_extensions_tutorial_thumb.png

Creating extensions using numpy and scipy

_images/sphx_glr_super_resolution_with_caffe2_thumb.png

Transfering a model from PyTorch to Caffe2 and Mobile using ONNX

_images/cpp_logo.png

Custom C++ and CUDA Extensions

Next

© Copyright 2017, PyTorch.
Built with Sphinx using a theme provided by Read the Docs .
