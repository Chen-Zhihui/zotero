
Skip to content
This repository

    Pull requests
    Issues
    Marketplace
    Explore

        New repository Import repository New gist New organization
        This repository
        New issue 
    @Chen-Zhihui
        Signed in as Chen-Zhihui
        Your profile
        Your stars
        Your gists
        Help
        Settings
        Sign out

Sign out

    Watch 63
    Notifications
    Not watching Be notified when participating or @mentioned. Watch
    Watching Be notified of all conversations. Unwatch
    Ignoring Never be notified. Stop ignoring
    Unstar 298
    Star 298
    Fork
    Where should we fork this repository?
    Loading
    73

xmikos / qspectrumanalyzer
Code Issues 21 Pull requests 1 Projects 0 Wiki Insights
Spectrum analyzer for multiple SDR platforms (PyQtGraph based GUI for soapy_power, hackrf_sweep, rtl_power, rx_power and other backends)
sdr spectrum-analyzer software-defined-radio radio rtl-sdr hackrf limesdr airspy fft visualization qt python

    109 commits
    5 branches
    11 releases
    4 contributors
    GPL-3.0

    Python 99.3%
    Shell 0.7%

Python Shell
Clone or download
Use SSH
Clone with HTTPS

Use Git or checkout with SVN using the web URL.
Use HTTPS
Clone with SSH

Use an SSH key and passphrase from account.
Download ZIP
Launching GitHub Desktop ...

If nothing happens, download GitHub Desktop and try again.

Go back
Launching GitHub Desktop ...

If nothing happens, download GitHub Desktop and try again.

Go back
Launching Xcode ...

If nothing happens, download Xcode and try again.

Go back
Launching Visual Studio ...

If nothing happens, download the GitHub extension for Visual Studio and try again.

Go back
Create new file
Upload files Find file
Branch: master
Switch branches/tags

    Branches
    Tags

gh-pages hackrf_sweep master pyqt5 rtl_power_fftw
Nothing to show
v2.2.0 v2.1.0 v2.0.0 v1.6.0 v1.5.0 v1.4.0 v1.3.0 v1.2.0 v1.1.1 v1.1 v1.0
Nothing to show
New pull request
Latest commit 625ba9d Apr 28, 2017
@xmikos
xmikos Refactoring
Permalink
	Failed to load latest commit information.
	qspectrumanalyzer 	Refactoring 	Apr 28, 2017
	.gitignore 	Add peak hold and smoothing; fix window maximization at startup; spli… 	Dec 14, 2015
	LICENSE 	Initial commit 	Mar 3, 2015
	MANIFEST.in 	Always open console on Windows (but hide it) 	Mar 30, 2017
	PKGBUILD 	Update version to 2.2.0 	Mar 30, 2017
	README.rst 	Show scan progress if interval is >= 1 s 	Apr 12, 2017
	qspectrumanalyzer.desktop 	Update .desktop file 	Mar 30, 2017
	qspectrumanalyzer.ico 	Switch from cx_Freeze to PyInstaller / subzero for building frozen Wi… 	Mar 28, 2017
	qspectrumanalyzer.png 	Initial commit 	Mar 3, 2015
	qspectrumanalyzer.svg 	Initial commit 	Mar 3, 2015
	setup.py 	Update setup.py to be compatible with latest version of subzero 	Mar 31, 2017
README.rst
QSpectrumAnalyzer

Spectrum analyzer for multiple SDR platforms (PyQtGraph based GUI for soapy_power, hackrf_sweep, rtl_power, rx_power and other backends)
Screenshots

https://xmikos.github.io/qspectrumanalyzer/qspectrumanalyzer_screenshot.png

https://xmikos.github.io/qspectrumanalyzer/qspectrumanalyzer_screenshot2.png
Requirements

    Python >= 3.3
    PyQt4 / PyQt5 / PySide / PySide2
    Qt.py ( https://github.com/mottosso/Qt.py )
    PyQtGraph ( http://www.pyqtgraph.org )
    soapy_power ( https://github.com/xmikos/soapy_power )
    Optional: hackrf / rtl-sdr / rtl_power_fftw / rx_tools

Backends
Default backend

    soapy_power ( https://github.com/xmikos/soapy_power )

soapy_power is the default and recommended universal SDR backend in QSpectrumAnalyzer. It is based on SoapySDR and supports nearly all SDR platforms (RTL-SDR, HackRF, Airspy, SDRplay, LimeSDR, bladeRF, USRP and some other SDR devices). It is highly configurable (see additional parameters help in Settings menu) and supports short acquisition time for near real-time continuous measurement.
Other backends

    hackrf_sweep ( https://github.com/mossmann/hackrf )

hackrf_sweep backend enables wideband spectrum monitoring by rapidly retuning the radio without requiring individual tuning requests from the host computer. This allows unprecedented sweep rate of 8 GHz per second. Only HackRF is supported.

    rtl_power_fftw ( https://github.com/AD-Vega/rtl-power-fftw )

rtl_power_fftw is alternative backend for RTL-SDR devices and has various benefits over rtl_power . E.g. better FFT performance (thanks to use of fftw library) and possibility to use short acquisition time for near real-time continuous measurement (minimum interval in original rtl_power is 1 second).

    rtl_power ( https://github.com/keenerd/rtl-sdr )

rtl_power is original backend for RTL-SDR devices. There are better alternatives now, but if you want to use it, you should use Keenerds fork of rtl-sdr (latest Git revision), because rtl_power in original rtl-sdr package (from osmocom.org) is broken (especially when used with cropping).

    rx_power ( https://github.com/rxseger/rx_tools ) [unsupported]

rx_power (part of rx_tools ) is also based on SoapySDR (like default soapy_power backend) and therefore supports nearly all SDR platforms. But it is much slower than soapy_power, doesn't support near real-time continuous measurement (minimum interval is 1 second, same as rtl_power ) and is buggy. Backend is currently unsupported, if you want to fix it, patches are welcome.
Usage

Start QSpectrumAnalyzer by running qspectrumanalyzer .

You can choose which backend you want to use in File -> Settings (or Application menu -> Preferences on Mac OS X), default is soapy_power . Device, sample rate, bandwidth, LNB LO, path to backend executable and additional backend parameters can be also manually specified there. You can also set waterfall plot history size. Default is 100 lines, be aware that really large sweeps (with a lot of bins) would require a lot of system memory, so don't make this number too big.

Controls should be intuitive, but if you want consistent results, you should turn off automatic gain control (set gain to some fixed number) and also set crop to 20% or more. For finding out ppm correction factor for your rtl-sdr stick, use kalibrate-rtl .

You can move and zoom plot with mouse, change plot settings or export plots from right-click menu. Waterfall plot black/white levels and color lookup table can be changed in mini-histogram widget (on Levels tab).
Installation
Arch Linux:

Stable version:

 git clone https://aur.archlinux.org/qspectrumanalyzer.git
cd qspectrumanalyzer
makepkg -sri

Git master branch:

 git clone https://aur.archlinux.org/qspectrumanalyzer-git.git
cd qspectrumanalyzer-git
makepkg -sri

Or simply use pacaur (or any other AUR helper) which will also automatically install all QSpectrumAnalyzer dependencies:

 pacaur -S qspectrumanalyzer
pacaur -S qspectrumanalyzer-git

Ubuntu:

 # Add SoapySDR PPA to your system
sudo add-apt-repository -y ppa:myriadrf/drivers

# Update list of packages
sudo apt-get update

# Install basic dependencies
sudo apt-get install python3-pip python3-pyqt5 python3-numpy python3-scipy soapysdr python3-soapysdr

# Install SoapySDR drivers for your hardware (e.g. RTL-SDR, Airspy, HackRF, LimeSDR, etc.)
sudo apt-get install soapysdr-module-rtlsdr soapysdr-module-airspy soapysdr-module-hackrf soapysdr-module-lms7

# Install QSpectrumAnalyzer locally for your current user
pip3 install --user qspectrumanalyzer

qspectrumanalyzer and soapy_power executables will be then placed in ~/.local/bin directory, you can add it to your PATH in ~/.bashrc .

If you want to install QSpectrumAnalyzer directly from Git master branch, you can use this procedure:

 git clone https://github.com/xmikos/qspectrumanalyzer.git
cd qspectrumanalyzer
pip3 install --user .

Windows:

Only 64-bit Windows are supported (there are no public 32-bit builds of SoapySDR libraries and drivers).

    install SoapySDR libraries and drivers (bundled as part of Pothos SDR installer: download ). This bundle also includes other great SDR apps like CubicSDR , GQRX , GNU Radio Companion , Pothos GUI , Lime Suite and Zadig . Utilities like hackrf_sweep and rtl_power are also included.
    download QSpectrumAnalyzer installer or portable zip archive from GitHub releases page
    after you connect your SDR device, you have to run Zadig to install USB drivers

You can also install QSpectrumAnalyzer manually from PyPI :

    install Python 3.6.x (64-bit) from python.org and add Python to PATH

    install SoapySDR libraries and drivers (bundled as part of Pothos SDR installer: download )

    Open cmd.exe and run:

     pip install PyQt5
    pip install QSpectrumAnalyzer

You should then be able to run it with qspectrumanalyzer (or python -m qspectrumanalyzer if it doesn't work for you).
Todo:

    save FFT history (allow big waterfall plot saved to file)
    automatic peak detection / highlighting
    display average noise level
    frequency markers / bookmarks with notes (even importing and exporting .csv file with predefined channels, etc.)

    © 2018 GitHub , Inc.
    Terms
    Privacy
    Security
    Status
    Help

    Contact GitHub
    API
    Training
    Shop
    Blog
    About

You can't perform that action at this time.
You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session.
Press h to open a hovercard with more details.
