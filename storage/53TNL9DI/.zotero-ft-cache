
Skip to content
This repository

    Pull requests
    Issues
    Marketplace
    Explore

        New repository Import repository New gist New organization
        This repository
        New issue 
    @Chen-Zhihui
        Signed in as Chen-Zhihui
        Your profile
        Your stars
        Your gists
        Help
        Settings
        Sign out

Sign out

    Watch 86
    Notifications
    Not watching Be notified when participating or @mentioned. Watch
    Watching Be notified of all conversations. Unwatch
    Ignoring Never be notified. Stop ignoring
    Unstar 655
    Star 655
    Fork
    Where should we fork this repository?
    Loading
    279

wy1iu / sphereface
Code Issues 37 Pull requests 1 Projects 0 Wiki Insights
Implementation for <SphereFace: Deep Hypersphere Embedding for Face Recognition> in CVPR'17.
face-recognition caffe sphereface cvpr-2017 face-detection angular-softmax

    80 commits
    1 branch
    0 releases
    2 contributors
    MIT

    Jupyter Notebook 57.8%
    C++ 33.1%
    Python 4.1%
    Cuda 2.5%
    CMake 1.2%
    Matlab 0.5%
    Other 0.8%

Jupyter Notebook C++ Python Cuda CMake Matlab Other
Clone or download
Use SSH
Clone with HTTPS

Use Git or checkout with SVN using the web URL.
Use HTTPS
Clone with SSH

Use an SSH key and passphrase from account.
Download ZIP
Launching GitHub Desktop ...

If nothing happens, download GitHub Desktop and try again.

Go back
Launching GitHub Desktop ...

If nothing happens, download GitHub Desktop and try again.

Go back
Launching Xcode ...

If nothing happens, download Xcode and try again.

Go back
Launching Visual Studio ...

If nothing happens, download the GitHub extension for Visual Studio and try again.

Go back
Create new file
Upload files Find file
Branch: master
Switch branches/tags

    Branches
    Tags

master
Nothing to show
Nothing to show
New pull request
Fetching latest commitâ€¦
Cannot retrieve the latest commit at this time.
Permalink
	Failed to load latest commit information.
	preprocess 	fix most of the bugs 	Aug 10, 2017
	test 	minor correction 	Sep 5, 2017
	tools 	update v1.0 	Jul 21, 2017
	train 	sphereface-64 	Feb 2, 2018
	.gitmodules 	update v1.0 	Jul 21, 2017
	LICENSE 	Update and rename license to LICENSE 	Oct 5, 2017
	README.md 	Update README.md 	Mar 21, 2018
README.md
SphereFace : Deep Hypersphere Embedding for Face Recognition

By Weiyang Liu, Yandong Wen, Zhiding Yu, Ming Li, Bhiksha Raj and Le Song
License

SphereFace is released under the MIT License (refer to the LICENSE file for details).
Update

    2018.2.1 : As requested, the prototxt files for SphereFace-64 are released.

    2018.1.27 : We updated the appendix of our SphereFace paper with useful experiments and analysis. Take a look here . The content contains:
        The intuition of removing the last ReLU;
        Why do we want to normalize the weights other than because we need more geometric interpretation?
        Empirical experiment of zeroing out the biases;
        More 2D visualization of A-Softmax loss on MNIST;
        Angular Fisher score for evaluating the angular feature discriminativeness, which is a new and straightforward evluation metric other than the final accuracy.
        Experiments of SphereFace on MegaFace with different convolutional layers;
        The annealing optimization strategy for A-Softmax loss;
        Details of the 3-patch ensemble strategy in MegaFace challenge;

    2018.1.20 : We updated some resources to summarize the current advances in angular margin learning. Take a look here .

Contents

    Introduction
    Citation
    Requirements
    Installation
    Usage
    Models
    Results
    Video Demo
    Note
    Third-party re-implementation
    Resources for angular margin learning

Introduction

The repository contains the entire pipeline (including all the preprocessings) for deep face recognition with SphereFace . The recognition pipeline contains three major steps: face detection, face alignment and face recognition.

SphereFace is a recently proposed face recognition method. It was initially described in an arXiv technical report and then published in CVPR 2017 . The most up-to-date paper with more experiments can be found at arXiv or here . To facilitate the face recognition research, we give an example of training on CAISA-WebFace and testing on LFW using the 20-layer CNN architecture described in the paper (i.e. SphereFace-20).

In SphereFace, our network architecures use residual units as building blocks, but are quite different from the standrad ResNets (e.g., BatchNorm is not used, the prelu replaces the relu, different initializations, etc). We proposed 4-layer, 20-layer, 36-layer and 64-layer architectures for face recognition (details can be found in the paper and prototxt files ). We provided the 20-layer architecure as an example here. If our proposed architectures also help your research, please consider to cite our paper.

SphereFace achieves the state-of-the-art verification performance (previously No.1) in MegaFace Challenge under the small training set protocol.
Citation

If you find SphereFace useful in your research, please consider to cite:

 @InProceedings{Liu_2017_CVPR, title = {SphereFace: Deep Hypersphere Embedding for Face Recognition}, author = {Liu, Weiyang and Wen, Yandong and Yu, Zhiding and Li, Ming and Raj, Bhiksha and Song, Le}, booktitle = {The IEEE Conference on Computer Vision and Pattern Recognition (CVPR)}, year = {2017} }  

Our another closely-related previous work in ICML'16 ( more ):

 @InProceedings{Liu_2016_ICML, title = {Large-Margin Softmax Loss for Convolutional Neural Networks}, author = {Liu, Weiyang and Wen, Yandong and Yu, Zhiding and Yang, Meng}, booktitle = {Proceedings of The 33rd International Conference on Machine Learning}, year = {2016} }  

Requirements

    Requirements for Matlab
    Requirements for Caffe and matcaffe (see: Caffe installation instructions )
    Requirements for MTCNN (see: MTCNN - face detection & alignment ) and Pdollar toolbox (see: Piotr's Image & Video Matlab Toolbox ).

Installation

    Clone the SphereFace repository. We'll call the directory that you cloned SphereFace as SPHEREFACE_ROOT .

     git clone --recursive https://github.com/wy1iu/sphereface.git

    Build Caffe and matcaffe

     cd  $SPHEREFACE_ROOT /tools/caffe-sphereface
    # Now follow the Caffe installation instructions here: 
    # http://caffe.berkeleyvision.org/installation.html 
    make all -j8 &&  make matcaffe

Usage

After successfully completing the installation , you are ready to run all the following experiments.
Part 1: Preprocessing

Note: In this part, we assume you are in the directory $SPHEREFACE_ROOT/preprocess/

    Download the training set ( CASIA-WebFace ) and test set ( LFW ) and place them in data/ .

     mv /your_path/CASIA_WebFace  data/
    ./code/get_lfw.sh
    tar xvf data/lfw.tgz -C data/

    Please make sure that the directory of data/ contains two datasets.

    Detect faces and facial landmarks in CAISA-WebFace and LFW datasets using MTCNN (see: MTCNN - face detection & alignment ).

     # In Matlab Command Window
    run code/face_detect_demo.m 

    This will create a file dataList.mat in the directory of result/ .

    Align faces to a canonical pose using similarity transformation.

     # In Matlab Command Window
    run code/face_align_demo.m 

    This will create two folders ( CASIA-WebFace-112X96/ and lfw-112X96/ ) in the directory of result/ , containing the aligned face images.

Part 2: Train

Note: In this part, we assume you are in the directory $SPHEREFACE_ROOT/train/

    Get a list of training images and labels.

     mv ../preprocess/result/CASIA-WebFace-112X96 data/ # In Matlab Command Window run code/get_list.m  

    The aligned face images in folder CASIA-WebFace-112X96/ are moved from preprocess folder to train folder. A list CASIA-WebFace-112X96.txt is created in the directory of data/ for the subsequent training.

    Train the sphereface model.

     ./code/sphereface_train.sh 0,1

    After training, a model sphereface_model_iter_28000.caffemodel and a corresponding log file sphereface_train.log are placed in the directory of result/sphereface/ .

Part 3: Test

Note: In this part, we assume you are in the directory $SPHEREFACE_ROOT/test/

    Get the pair list of LFW ( view 2 ).

     mv ../preprocess/result/lfw-112X96 data/
    ./code/get_pairs.sh

    Make sure that the LFW dataset and pairs.txt in the directory of data/

    Extract deep features and test on LFW.

     # In Matlab Command Window
    run code/evaluation.m 

    Finally we have the sphereface_model.caffemodel , extracted features pairs.mat in folder result/ , and accuracy on LFW like this:
    fold 	1 	2 	3 	4 	5 	6 	7 	8 	9 	10 	AVE
    ACC 	99.33% 	99.17% 	98.83% 	99.50% 	99.17% 	99.83% 	99.17% 	98.83% 	99.83% 	99.33% 	99.30%

Models

    Visualizations of network architecture (tools from ethereon ):
        SphereFace-20: link
    Model file
        SphereFace-20: Google Drive | Baidu

Results

    Following the instruction, we go through the entire pipeline for 5 times. The accuracies on LFW are shown below. Generally, we report the average but we release the model-3 here.
    Experiment 	#1 	#2 	#3 (released) 	#4 	#5
    ACC 	99.24% 	99.20% 	99.30% 	99.27% 	99.13%

    Other intermediate results:
        LFW features: Google Drive | Baidu
        Training log: Google Drive | Baidu

Video Demo

SphereFace Demo

Please click the image to watch the Youtube video. For Youku users, click here .

Details:

    It is an open-set face recognition scenario. The video is processed frame by frame, following the same pipeline in this repository.
    Gallery set consists of 6 identities. Each main character has only 1 gallery face image. All the detected faces are included in probe set.
    There is no overlap between gallery set and training set (CASIA-WebFace).
    The scores between each probe face and gallery set are computed by cosine similarity. If the maximal score of a probe face is smaller than a pre-definded threshold, the probe face would be considered as an outlier.
    Main characters are labeled by boxes with different colors. ( #ff0000 Rachel, #ffff00 Monica, #ff80ff Phoebe, #00ffff Joey, #0000ff Chandler, #00ff00 Ross)

Note

    Backward gradient
        In this implementation, we did not strictly follow the equations in paper. Instead, we normalize the scale of gradient. It can be interpreted as a varying strategy for learning rate to help converge more stably. Similar idea and intuition also appear in normalized gradients and projected gradient descent .
        More specifically, if the original gradient of f w.r.t x can be written as df/dx = coeff_w * w + coeff_x * x , we use the normalized version [df/dx] = (coeff_w * w + coeff_x * x) / norm_wx to perform backward propragation, where norm_wx is sqrt(coeff_w^2 + coeff_x^2) . The same operation is also applied to the gradient of f w.r.t w .
        In fact, you do not necessarily need to use the original gradient, since the original gradient sometimes is not an optimal design. One important criterion for modifying the backprop gradient is that the new "gradient" (strictly speaking, it is not a gradient anymore) need to make the objective value decrease stably and consistently. (In terms of some failure cases for gradient-based back-prop, I recommand a great talk by Shai Shalev-Shwartz )
        If you use the original gradient to do the backprop, you could still make it work but may need different lambda settings, iteration number and learning rate decay strategy.

    Lambda and Note for training (When the loss becomes 87)
        Please refer to our previous note and explanation .

    According to recent advances, using feature normalization with a tunable scaling parameter s can significantly improve the performance of SphereFace on MegaFace challenge
        This is supported by the experiments done by CosFace . Similar idea also appears in additive margin softmax .

    Difficulties in convergence - When you encounter difficulties in convergence (it may appear if you use SphereFace in another dataset), usually there are a few easy ways to address it.
        First, try to use large mini-batch size.
        Second, try to use PReLU instead of ReLU.
        Third, increase the width and depth of our network.
        Fourth, try to use better initialization. For example, use the pretrained model from the original softmax loss (it is also equivalent to finetuning).
        Last and the most effective thing you could try is to change the hyper-parameters for lambda_min, lambda and its decay speed.

Third-party re-implementation

    PyTorch: code by clcarwin .
    TensorFlow: code by pppoe .
    TensorFlow: code by hujun100 .
    TensorFlow: code by andrewhuman
    MXNet: code by deepinsight (by setting loss-type=1: SphereFace)
    Caffe2: code by tpys .
    Trained on MS-1M: code by KaleidoZhouYN .
    System: A cool face demo system using SphereFace by tpys .
    Third-party pretrained models: code by goodluckcwl

Resources for angular margin learning

L-Softmax loss and SphereFace present a promising framework for angular representation learning, which is shown very effective in deep face recognition. We are super excited that our works has inspired many well-performing methods (and loss functions). We list a few of them for your potential reference:

    Additive margin softmax: paper and code
    CosFace: paper
    ArcFace/InsightFace: paper and code
    NormFace: paper and code
    L2-Softmax: paper
    von Mises-Fisher Mixture Model: paper
    COCO loss: paper and code
    Angular Triplet Loss: code

To evaluate the effectiveness of the angular margin learning method, you may consider to use the angular Fisher score proposed in the Appendix E of our SphereFace Paper .

Disclaimer: Some of these methods may not necessarily be inspired by us, but we still list them due to its relevance and excellence.
Contact

Weiyang Liu and Yandong Wen

Questions can also be left as issues in the repository. We will be happy to answer them.

    Â© 2018 GitHub , Inc.
    Terms
    Privacy
    Security
    Status
    Help

    Contact GitHub
    API
    Training
    Shop
    Blog
    About

You can't perform that action at this time.
You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session.
Press h to open a hovercard with more details.
