
Skip to content
This repository

    Pull requests
    Issues
    Marketplace
    Explore

        New repository Import repository New gist New organization
        This repository
        New issue 
    @Chen-Zhihui
        Signed in as Chen-Zhihui
        Your profile
        Your stars
        Your gists
        Help
        Settings
        Sign out

Sign out

    Watch 146
    Notifications
    Not watching Be notified when participating or @mentioned. Watch
    Watching Be notified of all conversations. Unwatch
    Ignoring Never be notified. Stop ignoring
    Unstar 3,024
    Star 3,024
    Fork
    Where should we fork this repository?
    Loading
    262

ponylang / ponyc
Code Issues 194 Pull requests 18 Projects 0 Wiki Insights
üê¥ Pony is an open-source, actor-model, capabilities-secure, high performance programming language http://www.ponylang.org
pony-language pony-source ponyc programming-language actor-model

    4,825 commits
    30 branches
    50 releases
    116 contributors
    BSD-2-Clause

    C++ 39.4%
    C 37.5%
    Pony 21.0%
    Python 1.1%
    Makefile 0.6%
    GAP 0.2%
    Other 0.2%

C++ C Pony Python Makefile GAP Other
Clone or download
Use SSH
Clone with HTTPS

Use Git or checkout with SVN using the web URL.
Use HTTPS
Clone with SSH

Use an SSH key and passphrase from account.
Download ZIP
Launching GitHub Desktop ...

If nothing happens, download GitHub Desktop and try again.

Go back
Launching GitHub Desktop ...

If nothing happens, download GitHub Desktop and try again.

Go back
Launching Xcode ...

If nothing happens, download Xcode and try again.

Go back
Launching Visual Studio ...

If nothing happens, download the GitHub extension for Visual Studio and try again.

Go back
Create new file
Upload files Find file
Branch: master
Switch branches/tags

    Branches
    Tags

MinGW64 adaptive-per-actor-scheduler-batch-sizes backpressure-all-the-things backpressure basic-circleci block-message-by-scheduler-number cycle-is-normal duplicate-long-tests enhancement/autorecover-rhs feature/gencap-write gc-primitive llvm-3.9.1 map-insert_if_absent master message/this-incomplete net-address-equality netbsd_7 no-coalesce-checking pr/1227 process_monitor_buffering refactor/reference-pass refactor/remove-format-settings refactor/status-pass release sean-special-pony-for-2317 sean_foo tcp-connection-dont-double-resubscribe test update-osx-from-source-instructions xoroshiro
Nothing to show
0.21.3 0.21.2 0.21.1 0.21.0 0.20.0 0.19.3 0.19.2 0.19.1 0.19.0 0.18.1 0.18.0 0.17.0 0.16.1 0.16.0 0.15.0 0.14.0 0.13.2 0.13.1 0.13.0 0.12.3 0.12.2 0.12.1 0.12.0 0.11.4 0.11.3 0.11.2 0.11.1 0.11.0 0.10.0 0.9.0 0.8.0 0.7.0 0.6.0 0.5.1 0.5.0 0.4.0 0.3.3 0.3.2 0.3.1 0.3.0 0.2.1 0.2.0 0.1.7 0.1.6 0.1.5 0.1.4 0.1.3 0.1.2 0.1.1 0.1.0
Nothing to show
New pull request
Fetching latest commit‚Ä¶
Cannot retrieve the latest commit at this time.
Permalink
	Failed to load latest commit information.
	.ci-dockerfiles 	Add CircleCI job for testing Pony with OpenSSL 1.1.0 ( #2505 ) 	Jan 18, 2018
	.circleci 	Switch from MCJIT to ORC JIT ( #2518 ) 	Mar 11, 2018
	benchmark 	Fix allocation sizes in runtime benchmarks ( #2383 ) 	Nov 29, 2017
	examples 	New Ponybench API (RFC 52) ( #2578 ) 	Mar 8, 2018
	lib 	Revert GBencDragonFly BSD 4.8 Support. ( #2579 ) 	Mar 8, 2018
	minimal-cases 	Remove test better covered in #1629 ( #1992 ) 	Jun 29, 2017
	packages 	fix off-by-one error in String.cstring ( #2616 ) 	Mar 31, 2018
	src 	Do not realloc non-pony_alloc'ed memory in pony_realloc ( #2618 ) 	Mar 31, 2018
	test 	add NULL check to array inference code ( #2603 ) 	Mar 29, 2018
	.appveyor.yml 	cleanup build files after doc generation merge ( #2538 ) 	Feb 6, 2018
	.bintray.bash 	Reduce the escaping in Bintray descriptor files 	Mar 24, 2017
	.gitattributes 	FIX include pony.g in archive files 	Jul 29, 2017
	.gitignore 	Ignore /stdlib-docs/ to avoid clutter ( #2536 ) 	Feb 6, 2018
	.travis.yml 	Run all OSX tests in a single Travis MacOS instance 	Jan 27, 2018
	.travis_commands.bash 	Embed source code into generated documentation. ( #2439 ) 	Feb 5, 2018
	.travis_install.bash 	Run all OSX tests in a single Travis MacOS instance 	Jan 27, 2018
	.travis_script.bash 	Run all OSX tests in a single Travis MacOS instance 	Jan 27, 2018
	CHANGELOG.md 	Update CHANGELOG for PR #2616 [skip ci] 	Mar 31, 2018
	CODE_OF_CONDUCT.md 	Small typo fixes in the Code of Conduct ( #2029 ) 	Jul 13, 2017
	CONTRIBUTING.md 	add use=coverage option to Make to obtain coverage information ( #2230 ) 	Sep 20, 2017
	Dockerfile 	cleanup build files after doc generation merge ( #2538 ) 	Feb 6, 2018
	LICENSE 	Update License copyright ( #2149 ) 	Aug 10, 2017
	Makefile 	cleanup build files after doc generation merge ( #2538 ) 	Feb 6, 2018
	README.md 	Update the Windows build to support the latest Visual C++ Build Tools ( ‚Ä¶ 	Mar 22, 2018
	RELEASE_PROCESS.md 	Include new "Release" blog post in release process ( #1978 ) 	Jun 23, 2017
	STYLE_GUIDE.md 	Document explicit partial call style ( #2125 ) 	Aug 3, 2017
	SUPPORT.md 	Fix broken link in SUPPORT.md 	Sep 14, 2017
	VERSION 	Prep for 0.21.3 release 	Jan 15, 2018
	make.bat 	Use human-friendly package version numbers in AppVeyor. ( #2428 ) 	Dec 19, 2017
	pony.cloc 	removed misc directory 	Nov 26, 2014
	pony.g 	[RFC 50] add member docstrings ( #2543 ) 	Mar 1, 2018
	release.bash 	add unreleased section after release prep 	Apr 23, 2017
	waf 	Update Windows build system to use LLVM 5.0.1. ( #2477 ) 	Jan 10, 2018
	wscript 	Update the Windows build to support the latest Visual C++ Build Tools ( ‚Ä¶ 	Mar 22, 2018
README.md
Getting help

Need help? Not to worry, we have you covered.

We have a couple resources designed to help you learn, we suggest starting with the tutorial and from there, moving on to the Pony Patterns book. Additionally, standard library documentation is available online.

    Tutorial .
    Pony Patterns cookbook is in progress
    Standard library docs .
    Build Problems, see FAQ Compiling .

If you are looking for an answer "right now", we suggest you give our IRC channel a try. It's #ponylang on Freenode. If you ask a question, be sure to hang around until you get an answer. If you don't get one, or IRC isn't your thing, we have a friendly mailing list you can try. Whatever your question is, it isn't dumb, and we won't get annoyed.

    Mailing list .
    IRC .

Think you've found a bug? Check your understanding first by writing the mailing list. Once you know it's a bug, open an issue.

    Open an issue

Trying it online

If you want a quick way to test or run code, checkout the Playground .
Editor support

    Sublime Text: Pony Language
    Atom: language-pony
    Visual Studio: VS-pony
    Visual Studio Code: vscode-pony
    Vim:
        vim-pony
        pony.vim
        currycomb: Syntastic support
        SpaceVim , available as layer for Vim and Neovim . Just follow installation instructions then put call SpaceVim#layers#load('lang#pony') inside configuration file ( $HOME/.SpaceVim.d/init.vim )
    Emacs:
        ponylang-mode
        flycheck-pony
        pony-snippets
    BBEdit: bbedit-pony
    Micro: micro-pony-plugin

Installation

Pony supports LLVM 3.9 and on an experimental basis it supports LLVM 4.0 and 5.0. In addition, support for OpenSSL 1.1.0 was recently added for systems such as the Debian Stretch and Arch Linux, see FAQ Compiling for additional information.
Using Docker

Want to use the latest revision of Pony source, but don't want to build from source yourself? You can run the ponylang/ponyc Docker container, which is created from an automated build at each commit to master.

You'll need to install Docker using the instructions here . Then you can pull the latest ponylang/ponyc image using this command:

 docker pull ponylang/ponyc:latest

Then you'll be able to run ponyc to compile a Pony program in a given directory, running a command like this:

 docker run -v /path/to/my-code:/src/main ponylang/ponyc

If you're unfamiliar with Docker, remember to ensure that whatever path you provide for /path/to/my-code is a full path name and not a relative path, and also note the lack of a closing slash, / , at the end of the path name.

Note that if your host doesn't match the docker container, you'll probably have to run the resulting program inside the docker container as well, using a command like this:

 docker run -v /path/to/my-code:/src/main ponylang/ponyc ./main

If you're using docker-machine instead of native docker, make sure you aren't using an incompatible version of Virtualbox .
Docker for Windows

Pull the latest image as above.

 docker pull ponylang/ponyc:latest

Share a local drive (volume), such as c: , with Docker for Windows, so that they are available to your containers. (Refer to shared drives in the Docker for Windows documentation for details.)

Then you'll be able to run ponyc to compile a Pony program in a given directory, running a command like this:

 docker run -v c:/path/to/my-code:/src/main ponylang/ponyc

Note the inserted drive letter. Replace with your drive letter as appropriate.

To run a program, run a command like this:

 docker run -v c:/path/to/my-code:/src/main ponylang/ponyc ./main

To compile and run in one step run a command like this:

 docker run -v c:/path/to/my-code:/src/main ponylang/ponyc sh -c " ponyc && ./main "  

Docker and AVX2 Support

By default, the Pony Docker image is compiled without support for AVX CPU instructions. For optimal performance, you should build your Pony installation from source.
Linux using an RPM package (via Bintray)

For Red Hat, CentOS, Oracle Linux, or Fedora Linux, the release builds are packaged and available on Bintray ( pony-language/ponyc-rpm ).

To install builds via DNF:

 wget https://bintray.com/pony-language/ponyc-rpm/rpm -O bintray-pony-language-ponyc-rpm.repo
sudo mv bintray-pony-language-ponyc-rpm.repo /etc/yum.repos.d/

sudo dnf --refresh install ponyc

Or via Yum:

 wget https://bintray.com/pony-language/ponyc-rpm/rpm -O bintray-pony-language-ponyc-rpm.repo
sudo mv bintray-pony-language-ponyc-rpm.repo /etc/yum.repos.d/

sudo yum install ponyc

Or via Zypper:

 sudo zypper install gcc6 binutils-gold \
  zlib-devel libopenssl-devel pcre2-devel
wget https://bintray.com/pony-language/ponyc-rpm/rpm -O bintray-pony-language-ponyc-rpm.repo
sudo mv bintray-pony-language-ponyc-rpm.repo /etc/zypp/repos.d/

sudo zypper install ponyc

RPM and AVX2 Support

By default, the Pony RPM package is compiled without support for AVX CPU instructions. For optimal performance, you should build your Pony installation from source.
Linux using a DEB package (via Bintray)

For Ubuntu or Debian Linux, the release builds are packaged and available on Bintray ( pony-language/ponyc-debian ).

To install builds via Apt (and install Bintray's public key):

 sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys " D401AB61 DBE1D0A2 "  
echo  " deb https://dl.bintray.com/pony-language/ponyc-debian pony-language main "   |  sudo tee -a /etc/apt/sources.list
sudo apt-get update
sudo apt-get -V install ponyc

You may need to install ponyc (current) instead of ponyc-release (deprecated). And if you have issues with package authentication you may need to comment out the deb line in /etc/apt/sources.list , do an update, and uncomment it again. Feel free to ask for help if you have any problems!
DEB and AVX2 Support

By default, the Pony DEB package is compiled without support for AVX CPU instructions. For optimal performance, you should build your Pony installation from source.
Prepackaged Ubuntu Xenial

Make sure you have a gcc installed:

 sudo apt-get install build-essential

Set the CC environment variable:

 echo  " export CC= ` which gcc ` "   >>  ~ /.profile
export  CC= ` which gcc `  

Install ponyc via bintray:

 sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys " D401AB61 DBE1D0A2 "  
echo  " deb https://dl.bintray.com/pony-language/ponyc-debian pony-language main "   |  sudo tee -a /etc/apt/sources.list
sudo apt-get update
sudo apt-get -V install ponyc

Gentoo Linux

 layman -a stefantalpalaru
emerge dev-lang/pony

A live ebuild is also available in the overlay (dev-lang/pony-9999) and for Vim users there's app-vim/pony-syntax.
Linux using Linuxbrew

 brew update
brew install ponyc

NixOS Linux or any OS using nix

 nix-env -i ponyc

"cannot find 'ld'" error

If you get an error when trying to use ponyc to compile pony source that looks like this:

 collect2: fatal error: cannot find ' ld '  

you might have to install the ld-gold linker. It can typically be found by searching your distro's package repository for binutils-gold or just ld-gold .
Mac OS X using Homebrew

 brew update
brew install ponyc

Windows using ZIP (via Bintray)

Windows users will need to install:

    Visual Studio 2017 or 2015 (available here ) or the Visual C++ Build Tools 2017 or 2015 (available here ), and
        If using Visual Studio 2015, install the Windows 10 SDK (available here ).
        If using Visual Studio 2017 or the Visual C++ Build Tools 2017, install the latest Windows 10 SDK (10.x.x.x) for Desktop from the Visual Studio installer.

Once you have installed the prerequisites, you can download the latest ponyc release from bintray .
Building ponyc from source

First of all, you need a compiler with decent C11 support. The following compilers are supported, though we recommend to use the most recent versions.

    GCC >= 4.7
    Clang >= 3.4
    MSVC >= 2015
    XCode Clang >= 6.0

Pony requires LLVM version 3.9.1.

There is experimental support for building with LLVM 4.0.1 or 5.0.0, but this may result in decreased performance or crashes in generated applications.

NOTE: If LLVM version < 5.0.0 is used, cpu feature avx512f is diabled automagically to avoid LLVM bug 30542 otherwise the compiler crashes during the optimization phase.

Compiling Pony is only possible on x86 and ARM (either 32 or 64 bits).
Building on Linux

Get Pony-Sources from Github (More Information about Set Up Git https://help.github.com/articles/set-up-git/ ):

 sudo apt install git
git clone git://github.com/ponylang/ponyc

Linux and OS X
Arch

Install pony dependencies:

 pacman -S llvm make ncurses openssl pcre2 zlib  

To build ponyc and compile and helloworld:

 cd  ~ /ponyc/
make default_pic=true default_ssl= ' openssl_1.1.0 '  
./build/release/ponyc examples/helloworld
./helloworld

Debian Jessie

Add the following to /etc/apt/sources :

 deb http://llvm.org/apt/jessie/ llvm-toolchain-jessie-3.9 main deb-src http://llvm.org/apt/jessie/ llvm-toolchain-jessie-3.9 main  

Install the LLVM toolchain public GPG key, update apt and install packages:

 wget -O - http://llvm.org/apt/llvm-snapshot.gpg.key | sudo apt-key add -
sudo apt-get update
sudo apt-get install make gcc g++ git zlib1g-dev libncurses5-dev \
                       libssl-dev llvm-3.9-dev

Debian Jessie and some other Linux distributions don't include pcre2 in their package manager. pcre2 is used by the Pony regex package. To download and build pcre2 from source:

 wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre2-10.21.tar.bz2
tar xvf pcre2-10.21.tar.bz2
cd  pcre2-10.21
./configure --prefix=/usr
make
sudo make install

To build ponyc, compile and run helloworld:

 cd  ~ /ponyc/
make
./build/release/ponyc examples/helloworld
./helloworld

Debian Sid

Install pony dependencies:

 sudo apt-get update
sudo apt-get install make gcc g++ git zlib1g-dev libncurses5-dev \
  libssl-dev llvm llvm-dev libpcre2-dev

To build ponyc, compile and run helloworld:

 cd  ~ /ponyc/
make default_pic=true
./build/release/ponyc examples/helloworld
./helloworld

Ubuntu Trusty

Add the LLVM apt report to /etc/apt/sources.list. Open /etc/apt/sources.list and add the following lines to the end of the file:

 deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-3.9 main deb-src http://apt.llvm.org/trusty/ llvm-toolchain-trusty-3.9 main  

Add the LLVM repo as a trusted source:

 cd  /tmp
wget -O llvm-snapshot.gpg.key http://apt.llvm.org/llvm-snapshot.gpg.key
sudo apt-key add llvm-snapshot.gpg.key

Install dependencies:

 sudo apt-get update
sudo apt-get install -y build-essential git zlib1g-dev libncurses5-dev \
  libssl-dev llvm-3.9

Install libprce2:

 cd  /tmp
wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre2-10.21.tar.bz2
tar xjvf pcre2-10.21.tar.bz2
cd  pcre2-10.21
./configure --prefix=/usr
make
sudo make install

Clone the ponyc repo:

 cd  ~ /
git clone https://github.com/ponylang/ponyc.git

Build ponyc, compile and run helloworld:

 cd  ~ /ponyc/
make
./build/release/ponyc examples/helloworld
./helloworld

Ubuntu Xenial

Add the LLVM apt repos to /etc/apt/sources.list. Open /etc/apt/sources.list and add the following lines to the end of the file:

 deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-3.9 main deb-src http://apt.llvm.org/xenial/ llvm-toolchain-xenial-3.9 main  

Add the LLVM repo as a trusted source:

 cd  /tmp
wget -O llvm-snapshot.gpg.key http://apt.llvm.org/llvm-snapshot.gpg.key
sudo apt-key add llvm-snapshot.gpg.key

 sudo apt-get update
sudo apt-get install -y build-essential git zlib1g-dev libncurses5-dev libssl-dev libpcre2-dev llvm-3.9

Clone the ponyc repo:

 cd  ~ /
git clone https://github.com/ponylang/ponyc.git

Build ponyc, compile and run helloworld:

 cd  ~ /ponyc/
make
./build/release/ponyc examples/helloworld
./helloworld

Ubuntu Artful

 sudo apt-get update
sudo apt-get install -y build-essential git zlib1g-dev libncurses5-dev libssl-dev libpcre2-dev llvm-3.9

Clone the ponyc repo:

 cd  ~ /
git clone https://github.com/ponylang/ponyc.git

Build ponyc, compile and run helloworld:

 cd  ~ /ponyc/
make default_pic=true
./build/release/ponyc examples/helloworld
./helloworld

Fedora (25)

 dnf check-update
sudo dnf install git gcc-c++ make openssl-devel pcre2-devel zlib-devel \
  llvm-devel ncurses-devel

To build ponyc, compile and run helloworld:

 cd  ~ /ponyc/
make
./build/release/ponyc examples/helloworld
./helloworld

OpenSUSE (Leap 24.3)

 sudo zypper addrepo http://download.opensuse.org/repositories/devel:tools:compiler/openSUSE_Leap_42.3/devel:tools:compiler.repo
sudo zypper refresh
sudo zypper update
sudo zypper install git gcc-c++ make libopenssl-devel pcre2-devel zlib-devel \
  llvm3_9-devel binutils-gold

To build ponyc, compile and run helloworld:

 cd  ~ /ponyc/
make
./build/release/ponyc examples/helloworld
./helloworld

Alpine (Edge)

Install build tools/dependencies:

 apk add --update alpine-sdk libressl-dev binutils-gold llvm3.9 llvm3.9-dev \
  pcre2-dev libunwind-dev coreutils

To build ponyc, compile and run helloworld:

 cd  ~ /ponyc/
make default_pic=true
./build/release/ponyc examples/helloworld
./helloworld

Other Linux distributions

You need to have the development versions of the following installed:

    3.9.1
    zlib
    ncurses
    pcre2
    libssl

There is experimental support for LLVM 4.0.1 and 5.0.0, but this may result in decreased performance or crashes in generated applications.

If your distribution doesn't have a package for prce2, you will need to download and build it from source:

 wget ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre2-10.21.tar.bz2
tar xvf pcre2-10.21.tar.bz2
cd  pcre2-10.21
./configure --prefix=/usr
make
sudo make install

Finally to build ponyc, compile and run the hello world app:

 cd  ~ /ponyc/
make
./build/release/ponyc examples/helloworld
./helloworld

Building on DragonFly

Dragonfly has been tested on 64-bit X86 DragonFly 4.8.

First, install the required dependencies:

 sudo pkg install gmake
sudo pkg install llvm38
sudo pkg install pcre2

This will build ponyc and compile helloworld:

 gmake
./build/release/ponyc examples/helloworld

Building on FreeBSD

First, install the required dependencies:

    FreeBSD 11 for amd64 (64-bit). It is extremely difficult to coordinate the LLVM version, operating system support for atomics, and Pony to work in harmony on FreeBSD 10 or earlier. (See additional info below that mentions problems with 32-bit executable support.)

    The following packages, with their installation commands:

 sudo pkg install gmake
sudo pkg install llvm38
sudo pkg install pcre2
sudo pkg install libunwind

This will build ponyc and compile helloworld:

 gmake
./build/release/ponyc examples/helloworld

Building on Mac OS X

Linux and OS X

You'll need llvm 3.9.1 and the pcre2 library to build Pony. You can use either homebrew or MacPorts to install your dependencies.

There is experimental support for LLVM 4.0.1 or 5.0.0, but this may result in decreased performance or crashes in generated applications.

Installation via homebrew :

 brew update brew install llvm@3.9 pcre2 libressl  

Installation via MacPorts :

 sudo port install llvm-3.9 pcre2 libressl sudo port select --set llvm mp-llvm-3.9  

Launch the build with make after installing the dependencies:

 make ./build/release/ponyc examples/helloworld  

Building on Windows

Windows

Note: it may also be possible (as tested on build 14372.0 of Windows 10) to build Pony using the Ubuntu 14.04 instructions inside Bash on Ubuntu on Windows .

Building on Windows requires the following:

    Visual Studio 2017 or 2015 (available here ) or the Visual C++ Build Tools 2017 or 2015 (available here ), and
        If using Visual Studio 2015, install the Windows 10 SDK (available here ).
        If using Visual Studio 2017 or the Visual C++ Build Tools 2017, install the latest Windows 10 SDK (10.x.x.x) for Desktop from the Visual Studio installer.
    Python (3.6 or 2.7) needs to be in your PATH.

In a command prompt in the ponyc source directory, run the following:

 make.bat configure  

(You only need to run make.bat configure the first time you build the project.)

 make.bat build test  

This will automatically perform the following steps:

    Download some pre-built libraries used for building the Pony compiler and standard library.
        LLVM
        LibreSSL
        PCRE
    Build the pony compiler in the build/<config>-<llvm-version> directory.
    Build the unit tests for the compiler and the standard library.
    Run the unit tests.

You can provide the following options to make.bat when running the build or test commands:

    --config debug|release : whether or not to build a debug or release build ( release is the default).
    --llvm <version> : the LLVM version to build against ( 3.9.1 is the default).

Note that you need to provide these options each time you run make.bat; the system will not remember your last choice.

Other commands include clean , which will clean a specified configuration; and distclean , which will wipe out the entire build directory. You will need to run make configure after a distclean.
Building with link-time optimisation (LTO)

Link-time optimizations provide a performance improvement. You should strongly consider turning on LTO if you build ponyc from source. It's off by default as it comes with some caveats:

    If you aren't using clang as your linker, we've seen LTO generate incorrect binaries. It's rare but it can happen. Before turning on LTO you need to be aware that it's possible.

    If you are on MacOS, turning on LTO means that if you upgrade your version of XCode, you will have to rebuild your Pony compiler. You won't be able to link Pony programs if there is a mismatch between the version of XCode used to build the Pony runtime and the version of XCode you currently have installed.

You can enable LTO when building the compiler in release mode. There are slight differences between platforms so you'll need to do a manual setup. LTO is enabled by setting lto  to yes in the build command line:

 make lto=yes

If the build fails, you have to specify the LTO plugin for your compiler in the LTO_PLUGIN variable. For example:

 make LTO_PLUGIN=/usr/lib/LLVMgold.so

Refer to your compiler documentation for the plugin to use in your case.
Building the runtime as an LLVM bitcode file

If you're compiling with Clang, you can build the Pony runtime as an LLVM bitcode file by setting runtime-bitcode to yes in the build command line:

 make runtime-bitcode=yes

Then, you can pass the --runtimebc option to ponyc in order to use the bitcode file instead of the static library to link in the runtime:

 ponyc --runtimebc

This functionnality boils down to "super LTO" for the runtime. The Pony compiler will have full knowledge of the runtime and will perform advanced interprocedural optimisations between your Pony code and the runtime. If your're looking for maximum performance, you should consider this option. Note that this can result in very long optimisation times.
VirtualBox

Pony binaries can trigger illegal instruction errors under VirtualBox 4.x, for at least the x86_64 platform and possibly others.

Use VirtualBox 5.x to avoid possible problems.

You can learn more about AVX2 support.
Building Pony on Non-x86 platforms

On ARM platforms, the default gcc architecture specification used in the Makefile of native does not work correctly, and can even result in the gcc compiler crashing. You will have to override the compiler architecture specification on the make command line. For example, on a RaspberryPi2 you would say:

 make arch=armv7

To get a complete list of acceptable architecture names, use the gcc command:

 gcc -march=none

This will result in an error message plus a listing off all architecture types acceptable on your platform.

    ¬© 2018 GitHub , Inc.
    Terms
    Privacy
    Security
    Status
    Help

    Contact GitHub
    API
    Training
    Shop
    Blog
    About

You can't perform that action at this time.
You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session.
Press h to open a hovercard with more details.
