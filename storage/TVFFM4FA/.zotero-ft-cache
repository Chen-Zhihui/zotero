
Skip to content
This repository

    Pull requests
    Issues
    Marketplace
    Explore

        New repository Import repository New gist New organization
        This repository
        New issue 
    @Chen-Zhihui
        Signed in as Chen-Zhihui
        Your profile
        Your stars
        Your gists
        Help
        Settings
        Sign out

Sign out

    Watch 45
    Notifications
    Not watching Be notified when participating or @mentioned. Watch
    Watching Be notified of all conversations. Unwatch
    Ignoring Never be notified. Stop ignoring
    Unstar 246
    Star 246
    Fork
    Where should we fork this repository?
    Loading
    90

libinzhangyuan / asio_kcp
Code Issues 5 Pull requests 0 Projects 0 Wiki Insights
combine kcp with boost::asio. - kcp: a Fast and Reliable udp protocal.

    69 commits
    4 branches
    1 release
    1 contributor
    GPL-2.0

    C++ 57.8%
    Makefile 21.4%
    C 17.0%
    Shell 1.7%
    Vim script 1.2%
    CMake 0.9%

C++ Makefile C Shell Vim script CMake
Clone or download
Use SSH
Clone with HTTPS

Use Git or checkout with SVN using the web URL.
Use HTTPS
Clone with SSH

Use an SSH key and passphrase from account.
Download ZIP
Launching GitHub Desktop ...

If nothing happens, download GitHub Desktop and try again.

Go back
Launching GitHub Desktop ...

If nothing happens, download GitHub Desktop and try again.

Go back
Launching Xcode ...

If nothing happens, download Xcode and try again.

Go back
Launching Visual Studio ...

If nothing happens, download the GitHub extension for Visual Studio and try again.

Go back
Create new file
Upload files Find file
Branch: master
Switch branches/tags

    Branches
    Tags

develop kcp_bench_mark_test master send_msg_from_stdin
Nothing to show
ping_pong_mode
Nothing to show
New pull request
Fetching latest commit…
Cannot retrieve the latest commit at this time.
Permalink
	Failed to load latest commit information.
	asio_kcp_client_utest 	zhangyuan client_wrap: finished the async connect in client && let co… 	Oct 25, 2017
	asio_kcp_utest 	zhangyuan master changing the compiling path of muduo lib 	Jul 16, 2015
	bench_mark 	zhangyuan master readme and bench_mark log 	Jul 27, 2015
	client_lib 	zhangyuan client_wrap: finished the async connect in client && let co… 	Oct 25, 2017
	client_with_asio 	zhangyuan support the force disconnect by server side 	Oct 13, 2017
	docker 	zhangyuan client_lib: making connect stage do not block the progress 	Oct 18, 2017
	essential 	zhangyuan master timer.hpp for count the cpu usage 	Jul 15, 2015
	server 	zhangyuan moving auto send back test msg from server_lib 	Oct 16, 2017
	server_lib 	zhangyuan moving auto send back test msg from server_lib 	Oct 16, 2017
	third_party 	zhangyuan reorganize the docker_readme 	Sep 30, 2017
	util 	zhangyuan feature: disconnect when do not recv packet longtime 	Oct 10, 2017
	.gitignore 	zhangyuan master client_lib 	Jul 27, 2015
	Class_UML.mdj 	zhangyuan master uml 	Jul 17, 2015
	Class_UML_client.mdj 	zhangyuan master readme and bench_mark log 	Jul 27, 2015
	LICENSE 	Initial commit 	Jun 26, 2015
	allmake.sh 	zhangyuan optmize make shell 	Oct 13, 2017
	clean.sh 	zhangyuan master threadsafe_queue wait_and_grab_all 	Jul 15, 2015
	client_Class_UML.mdj 	zhangyuan master readme and bench_mark log 	Jul 27, 2015
	client_lib_usage.md 	zhangyuan client_wrap: finished the async connect in client && let co… 	Oct 25, 2017
	install_help.cn 	zhangyuan master readme 	Sep 9, 2016
	quick_make.sh 	zhangyuan optmize make shell 	Oct 13, 2017
	readme.md 	zhangyuan clean readme 	Oct 16, 2017
	todolist.txt 	zhangyuan master client_lib 	Jul 27, 2015
	utest_make.sh 	zhangyuan master client_lib 	Jul 27, 2015
readme.md
asio_kcp - a fast and reliable udp framework.
This framework will be the fastest protocal for pvp game.
kcp - a A Fast and Reliable ARQ Protocol (Can use with UDP)
website of kcp: https://github.com/skywind3000/kcp
This project wrap kcp by boost asio. Making it easy to use.
Feature

    Using in realtime pvp game that need miniest network delay. For example, the multiplayer first person shooting game.
    Reliable UDP protocal.
    Minimize delay. And the worst delay should be good. 3 or more times better than enet when worst network lag happen.
    Has good performace in wifi and phone network(3G, 4G).
    Extra using 20% ~ 50% network flow for speed improvement.

Bench mark

 worst network lag happen: asio: 10:51.21 291 295 269 268 231 195 249 230 225 204 enet: 10:51.21 1563 1520 1470 1482 1438 1454 1412 1637 1588 1540  

You can see the bench mark test result at here
Or you can see the bench mark detail log at bench_mark folder.
client_lib
Feature:

    Do not using boost. And do not using feature of c++11
    It's implement by original thread and socket.
    client_lib_usage

Recommend: use Dockerfile to compiling the server and client.

    Please read the doc: docker/docker_readme.md


### Or create compiling env yourself
* I using gcc 4.8 * Other version of gcc that support c++11 should be OK. You can compile asio_kcp as verifying.

    I using boost 1.58
        Other version of boost should be OK. You can compile asio_kcp as verifying.

    Build g2log
        download g2log from official website
            or using the package in third_party folder.
        cope g2log folder to third_party folder
        $ cd third_party/g2log/ && mkdir build && cd build && cmake .. && make

    Build muduo
        $ cd third_party/
        $ git clone https://github.com/chenshuo/muduo.git
            or using the package in third_party folder. third_party folder.
        $ cd muduo
        compile on OSX: $ patch -p1 < MacOSX.diff
            edit muduo/CMakeLists.txt.
                find set(CXX_FLAGS then add 2 new line:
                    -D__GXX_EXPERIMENTAL_CXX0X__
                    -std=c++11
                comment -march=native
                comment set(CMAKE_CXX_COMPILER "clang++")
                comment -Werror
                uncomment -DMUDUO_STD_STRING
        compile on linux:
            edit muduo/CMakeLists.txt.
                find set(CXX_FLAGS then add 2 new line:
                    -D__GXX_EXPERIMENTAL_CXX0X__
                    -std=c++11
                uncomment -DMUDUO_STD_STRING
                comment -Werror
        modify muduo/base/LogStream.h kSmallBuffer = 4000 -> kSmallBuffer = 4000*4
        adding VERBOSE=1 to "make" in muduo/build.sh will show detail of compiling.
        $ CC=gcc CXX=g++ BUILD_DIR=./build BUILD_TYPE=release BUILD_NO_EXAMPLES=1 . ./build.sh

    modify the BOOST_LIB_PATH and BOOST_INC_PATH in allmake.sh

    do compiling at project root folder: $ . allmake.sh

The third_party folder should like below,

 ▾ third_party/ ▾ g2log/ ▸ build/ ▸ src/ ▸ test_example/ ▸ test_performance/ ▸ test_unit/ CMakeLists.txt ▸ muduo/  

Compile unit test

    download gtest from website
        or just use the package in third_party folder.
    unpack the gtest-1.7.0.zip. coping gtest-1.7.0 folder to asio_kcp/third_party/
    $ cd gtest-1.7.0 && ./configure && make
    download googlemock from https://googlemock.googlecode.com/files/gmock-1.7.0.zip
        or just use the package in third_party folder.
    unpack the gmock-1.7.0.zip. coping gmock-1.7.0 folder to asio_kcp/third_party/
    $ cd gmock-1.7.0 && ./configure && make
    back to asio_kcp folder then $ . utest_make.sh
    $ ./asio_kcp_utest/asio_kcp_utest

The third_party folder should like below,

 ▾ third_party/ ▸ g2log/ ▸ gmock-1.7.0/ ▸ gtest-1.7.0/ ▸ muduo/  

Run example test
filter the verbose log from asio timer

 ./server/server 0.0.0.0 12345 2>&1 | grep --line-buffered -v -e deadline_timer -e "ec=system:0$" -e "|$" >>bserver.txt  

filter all asio log

 ./client_with_asio/client_with_asio 23425 127.0.0.1 12345 500 2>/dev/null  

run bench mark test of kcp.

    Server on your server

 git checkout kcp_bench_mark_test read the readme.md in this branch. and do compiling thing. then run server on your server: ./server/server 0.0.0.0 12345 2>&1 | grep --line-buffered -v -e deadline_timer -e "ec=system:0$" -e "|$" >>bserver.txt  

    run client on your client computer

 git checkout kcp_bench_mark_test read the readme.md in this branch. and do compiling thing. ./client_with_asio/client_with_asio 23445 120.26.200.117 12345 500 2>/dev/null # Note: changing the ip and port to your server which is running the asio_kcp_server  

how to test 3G/4G

    if you want to test the 3G/4G. you can share the wifi on your phone by using wiless AP. Making your client computer connect to this wifi.
    run client on your client computer (Note: changing the ip and port to your server)

Centos 6.5 install help:
boost http://www.boost.org/doc/libs/1_58_0/more/getting_started/unix-variants.html

    $ yum -y install python-devel
    $ tar jxvf boost_1_58_0.tar.bz2
    $ cd boost_1_58_0
    $ ./bootstrap.sh
    $ sudo ./b2 install --build-type=complete --layout=tagged

error when running server
/usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.15' not found

    strings /usr/lib64/libstdc++.so.6 | grep GLIBC // check the GLIBCXX_3.4.15. It is not in it.
    sudo find / -name "libstdc++.so*" 2>/dev/null // find the latest libstdc++.so It should be /usr/local/lib64/libstdc++.so.6.0.18
    sudo rm /usr/lib64/libstdc++.so.6
    sudo cp /usr/local/lib64/libstdc++.so.6.0.18 /usr/lib64/
    sudo ln -s /usr/lib64/libstdc++.so.6.0.18 /usr/lib64/libstdc++.so.6
    sudo vim /etc/ld.so.conf // add a new line: /usr/lib64
    sudo ldconfig // all ok

OSX install help
gcc 4.8

    install port if do not have one: https://www.macports.org/install.php
    port search gcc # show gcc version
    sudo /opt/local/bin/port install gcc48
    sudo /opt/local/bin/port select --set gcc mp-gcc48
    last step, close old shell, open a new shell.

https://apple.stackexchange.com/questions/118830/install-gcc-to-mac-via-terminal
http://www.tuicool.com/articles/reqiY3
boost 1.58

    https://stackoverflow.com/questions/104322/how-do-you-install-boost-on-macos

    © 2018 GitHub , Inc.
    Terms
    Privacy
    Security
    Status
    Help

    Contact GitHub
    API
    Training
    Shop
    Blog
    About

You can't perform that action at this time.
You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session.
Press h to open a hovercard with more details.
