
Rectifier (neural networks)
From Wikipedia, the free encyclopedia
This is the current revision of this page, as edited by 207.107.150.250 ( talk ) at 20:05, 13 March 2018 (Scale invariance for positive values only) . The present address (URL) is a permanent link to this version.
Revision as of 20:05, 13 March 2018 by 207.107.150.250 ( talk ) (Scale invariance for positive values only)
( diff ) ← Previous revision  | Latest revision (diff) | Newer revision → (diff)
Jump to: navigation , search
Plot of the rectifier (blue) and softplus (green) functions near x = 0

In the context of artificial neural networks , the rectifier is an activation function defined as the positive part of its argument:

f ( x ) = x + = max ( 0 , x ) {\displaystyle f(x)=x^{+}=\max(0,x)} {\displaystyle f(x)=x^{+}=\max(0,x)} ,

where x is the input to a neuron. This is also known as a ramp function and is analogous to half-wave rectification in electrical engineering. This activation function was first introduced to a dynamical network by Hahnloser et al. in a 2000 paper in Nature [1] with strong biological motivations and mathematical justifications. [2] . It has been demonstrated for the first time in 2011 to enable better training of deeper networks [3] , compared to the widely used activation functions prior to 2011, i.e., the logistic sigmoid (which is inspired by probability theory ; see logistic regression ) and its more practical [4] counterpart, the hyperbolic tangent . The rectifier is, as of 2018 [update] , the most popular activation function for deep neural networks . [5] [6]

A unit employing the rectifier is also called a rectified linear unit ( ReLU ). [7]

A smooth approximation to the rectifier is the analytic function

    f ( x ) = log ⁡ ( 1 + exp ⁡ x ) , {\displaystyle f(x)=\log(1+\exp x),} {\displaystyle f(x)=\log(1+\exp x),} 

which is called the softplus function. [8] The derivative of softplus is f ′ ( x ) = exp ⁡ x / ( 1 + exp ⁡ x ) = 1 / ( 1 + exp ⁡ ( − x ) ) {\displaystyle f'(x)=\exp x/(1+\exp x)=1/(1+\exp(-x))} {\displaystyle f'(x)=\exp x/(1+\exp x)=1/(1+\exp(-x))} , i.e. the logistic function .

Rectified linear units find applications in computer vision [3] and speech recognition [9] [10] using deep neural nets .

Contents

    1 Variants
        1.1 Noisy ReLUs
        1.2 Leaky ReLUs
        1.3 ELUs
    2 Advantages
    3 Potential problems
    4 See also
    5 References

Variants [ edit ]
Noisy ReLUs [ edit ]

Rectified linear units can be extended to include Gaussian noise , making them noisy ReLUs, giving [7]

    f ( x ) = max ( 0 , x + Y ) {\displaystyle f(x)=\max(0,x+Y)} f(x)=\max(0,x+Y) , with Y ∼ N ( 0 , σ ( x ) ) {\displaystyle Y\sim {\mathcal {N}}(0,\sigma (x))} Y\sim {\mathcal {N}}(0,\sigma (x)) 

Noisy ReLUs have been used with some success in restricted Boltzmann machines for computer vision tasks. [7]
Leaky ReLUs [ edit ]

Leaky ReLUs allow a small, non-zero gradient when the unit is not active. [10]

    f ( x ) = { x if  x > 0 0.01 x otherwise {\displaystyle f(x)={\begin{cases}x&{\mbox{if }}x>0\\0.01x&{\mbox{otherwise}}\end{cases}}} f(x)={\begin{cases}x&{\mbox{if }}x>0\\0.01x&{\mbox{otherwise}}\end{cases}} 

Parametric ReLUs take this idea further by making the coefficient of leakage into a parameter that is learned along with the other neural network parameters. [11]

    f ( x ) = { x if  x > 0 a x otherwise {\displaystyle f(x)={\begin{cases}x&{\mbox{if }}x>0\\ax&{\mbox{otherwise}}\end{cases}}} f(x)={\begin{cases}x&{\mbox{if }}x>0\\ax&{\mbox{otherwise}}\end{cases}} 

Note that for a ≤ 1 {\displaystyle a\leq 1} {\displaystyle a\leq 1} , this is equivalent to

    f ( x ) = max ( x , a x ) {\displaystyle f(x)=\max(x,ax)} f(x)=\max(x,ax) 

and thus has a relation to "maxout" networks. [11]
ELUs [ edit ]

Exponential linear units try to make the mean activations closer to zero which speeds up learning. It has been shown that ELUs can obtain higher classification accuracy than ReLUs. [12]

f ( x ) = { x if  x ≥ 0 a ( e x − 1 ) otherwise {\displaystyle f(x)={\begin{cases}x&{\mbox{if }}x\geq 0\\a(e^{x}-1)&{\mbox{otherwise}}\end{cases}}} {\displaystyle f(x)={\begin{cases}x&{\mbox{if }}x\geq 0\\a(e^{x}-1)&{\mbox{otherwise}}\end{cases}}}

a {\displaystyle a} a is a hyper-parameter to be tuned and a ≥ 0 {\displaystyle a\geq 0} a\geq 0 is a constraint.
Advantages [ edit ]

    Biological plausibility: One-sided, compared to the antisymmetry of tanh .
    Sparse activation: For example, in a randomly initialized network, only about 50% of hidden units are activated (having a non-zero output).
    Efficient gradient propagation: No vanishing or exploding gradient problems.
    Efficient computation: Only comparison, addition and multiplication.
    Scale-invariant: max ( 0 , a x ) = a max ( 0 , x )  for  a ≥ 0 {\displaystyle \max(0,ax)=a\max(0,x){\mbox{ for }}a\geq 0} {\displaystyle \max(0,ax)=a\max(0,x){\mbox{ for }}a\geq 0} .

Rectifying activation functions were used to separate specific excitation and unspecific inhibition in the Neural Abstraction Pyramid, which was trained in a supervised way to learn several computer vision tasks [13] . In 2011, [3] the use of the rectifier as a non-linearity has been shown to enable training deep supervised neural networks without requiring unsupervised pre-training. Rectified linear units, compared to sigmoid function or similar activation functions, allow for faster and effective training of deep neural architectures on large and complex datasets.
Potential problems [ edit ]

    Non-differentiable at zero: however it is differentiable anywhere else, including points arbitrarily close to (but not equal to) zero.
    Non-zero centered
    Unbounded
    Dying ReLU problem: ReLU neurons can sometimes be pushed into states in which they become inactive for essentially all inputs. In this state, no gradients flow backward through the neuron, and so the neuron becomes stuck in a perpetually inactive state and "dies." In some cases, large numbers of neurons in a network can become stuck in dead states, effectively decreasing the model capacity. This problem typically arises when the learning rate is set too high. It may be mitigated by using Leaky ReLUs instead.

See also [ edit ]

    Softmax function
    Sigmoid function
    Tobit model

References [ edit ]

    ^ R Hahnloser, R. Sarpeshkar, M A Mahowald, R. J. Douglas, H.S. Seung (2000). Digital selection and analogue amplification coexist in a cortex-inspired silicon circuit . Nature . 405 . pp. 947–951.   CS1 maint: Uses authors parameter ( link )
    ^ R Hahnloser, H.S. Seung (2001). Permitted and Forbidden Sets in Symmetric Threshold-Linear Networks . NIPS 2001.   CS1 maint: Uses authors parameter ( link )
    ^ a b c Xavier Glorot, Antoine Bordes and Yoshua Bengio (2011). Deep sparse rectifier neural networks (PDF) . AISTATS.   CS1 maint: Uses authors parameter ( link )
    ^ Yann LeCun , Leon Bottou , Genevieve B. Orr and Klaus-Robert Müller (1998). "Efficient BackProp" (PDF) . In G. Orr and K. Müller. Neural Networks: Tricks of the Trade . Springer.   CS1 maint: Uses authors parameter ( link ) CS1 maint: Uses editors parameter ( link )
    ^ LeCun, Yann; Bengio, Yoshua; Hinton, Geoffrey (2015). "Deep learning". Nature . 521 (7553): 436–444. Bibcode : 2015Natur.521..436L . doi : 10.1038/nature14539 . PMID   26017442 .  
    ^ Ramachandran, Prajit; Barret, Zoph; Quoc, V. Le (October 16, 2017). "Searching for Activation Functions". arXiv : 1710.05941  Freely accessible [ cs.NE ].  
    ^ a b c Vinod Nair and Geoffrey Hinton (2010). Rectified linear units improve restricted Boltzmann machines (PDF) . ICML .   CS1 maint: Uses authors parameter ( link )
    ^ C. Dugas, Y. Bengio, F. Bélisle, C. Nadeau, R. Garcia, NIPS'2000, (2001), Incorporating Second-Order Functional Knowledge for Better Option Pricing .
    ^ László Tóth (2013). Phone Recognition with Deep Sparse Rectifier Neural Networks (PDF) . ICASSP .   CS1 maint: Uses authors parameter ( link )
    ^ a b Andrew L. Maas, Awni Y. Hannun, Andrew Y. Ng (2014). Rectifier Nonlinearities Improve Neural Network Acoustic Models
    ^ a b He, Kaiming; Zhang, Xiangyu; Ren, Shaoqing; Sun, Jian (2015). "Delving Deep into Rectifiers: Surpassing Human-Level Performance on Image Net Classification". arXiv : 1502.01852  Freely accessible [ cs.CV ].  
    ^ Clevert, Djork-Arné; Unterthiner, Thomas; Hochreiter, Sepp (2015). "Fast and Accurate Deep Network Learning by Exponential Linear Units (ELUs)". arXiv : 1511.07289  Freely accessible [ cs.LG ].  
    ^ Behnke, Sven (2003). Hierarchical Neural Networks for Image Interpretation . Lecture Notes in Computer Science. 2766 . Springer. doi : 10.1007/b11963 .  

Retrieved from " https://en.wikipedia.org/w/index.php?title=Rectifier_(neural_networks)&oldid=830269188 "
Categories :

    Artificial neural networks

Hidden categories:

    CS1 maint: Uses authors parameter
    CS1 maint: Uses editors parameter
    Articles containing potentially dated statements from 2018
    All articles containing potentially dated statements

Navigation menu
Personal tools

    Not logged in
    Talk
    Contributions
    Create account
    Log in

Namespaces

    Article
    Talk

Variants

Views

    Read
    Edit
    View history

More

Search
Navigation

    Main page
    Contents
    Featured content
    Current events
    Random article
    Donate to Wikipedia
    Wikipedia store

Interaction

    Help
    About Wikipedia
    Community portal
    Recent changes
    Contact page

Tools

    What links here
    Related changes
    Upload file
    Special pages
    Permanent link
    Page information
    Wikidata item
    Cite this page

Print/export

    Create a book
    Download as PDF
    Printable version

Languages

    Español
    فارسی
    Italiano
    中文

Edit links

    This page was last edited on 13 March 2018, at 20:05.
    Text is available under the Creative Commons Attribution-ShareAlike License ; additional terms may apply. By using this site, you agree to the Terms of Use and Privacy Policy . Wikipedia® is a registered trademark of the Wikimedia Foundation, Inc. , a non-profit organization.

    Privacy policy
    About Wikipedia
    Disclaimers
    Contact Wikipedia
    Developers
    Cookie statement
    Mobile view

    Wikimedia Foundation
    Powered by MediaWiki

