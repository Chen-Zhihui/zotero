
Skip to content
This repository

    Pull requests
    Issues
    Marketplace
    Explore

        New repository Import repository New gist New organization
        This repository
        New issue 
    @Chen-Zhihui
        Signed in as Chen-Zhihui
        Your profile
        Your stars
        Your gists
        Help
        Settings
        Sign out

Sign out

    Watch 336
    Notifications
    Not watching Be notified when participating or @mentioned. Watch
    Watching Be notified of all conversations. Unwatch
    Ignoring Never be notified. Stop ignoring
    Unstar 3,802
    Star 3,802
    Fork
    Where should we fork this repository?
    Loading
    1,626

davidsandberg / facenet
Code Issues 188 Pull requests 8 Wiki Insights
Face recognition using Tensorflow
face-recognition tensorflow facenet deep-learning computer-vision face-detection mtcnn

    539 commits
    3 branches
    0 releases
    Fetching contributors
    MIT

    Python 94.0%
    Matlab 6.0%

Python Matlab
Clone or download
Use SSH
Clone with HTTPS

Use Git or checkout with SVN using the web URL.
Use HTTPS
Clone with SSH

Use an SSH key and passphrase from account.
Download ZIP
Launching GitHub Desktop ...

If nothing happens, download GitHub Desktop and try again.

Go back
Launching GitHub Desktop ...

If nothing happens, download GitHub Desktop and try again.

Go back
Launching Xcode ...

If nothing happens, download Xcode and try again.

Go back
Launching Visual Studio ...

If nothing happens, download the GitHub extension for Visual Studio and try again.

Go back
Create new file
Upload files Find file
Branch: master
Switch branches/tags

    Branches
    Tags

loss master tl_revisited
Nothing to show
Nothing to show
New pull request
Latest commit fe78f66 Mar 5, 2018
@davidsandberg
davidsandberg Merge pull request #656 from cjekel/master …

 Fix label_strings in export_embeddings.py

Permalink
	Failed to load latest commit information.
	contributed 	make labels_strings same as get_dataset() 	Mar 5, 2018
	data 	Moved data files for MTCNN 	Mar 1, 2017
	src 	train_tripletloss: add 'loss' to tensorboard 	Dec 28, 2017
	test 	Fixed path to freeze_graph.py 	Nov 11, 2017
	tmp 	Moved VGG face dataset download script 	Nov 12, 2017
	util 	moved batch-repr to tmp 	Mar 3, 2017
	.gitignore 	Added standard .gitignore for python projects 	Feb 15, 2017
	.project 	Added a couple of project files for pydev 	Apr 29, 2016
	.pydevproject 	Removed facenet subdirectory 	Sep 28, 2016
	.pylintrc 	First version 	Feb 21, 2017
	.travis.yml 	enable Python 3 test 	Oct 21, 2017
	LICENSE.md 	Create LICENSE.md 	Oct 22, 2016
	README.md 	Updated readme 	Nov 12, 2017
	__init__.py 	First version of MTCNN face detection and alignment 	Oct 18, 2016
	requirements.txt 	Python 3.4 and TF 1.2 for Travis CI 	Jul 2, 2017
README.md
Face Recognition using Tensorflow Build Status

This is a TensorFlow implementation of the face recognizer described in the paper "FaceNet: A Unified Embedding for Face Recognition and Clustering" . The project also uses ideas from the paper "A Discriminative Feature Learning Approach for Deep Face Recognition" as well as the paper "Deep Face Recognition" from the Visual Geometry Group at Oxford.
Compatibility

The code is tested using Tensorflow r1.2 under Ubuntu 14.04 with Python 2.7 and Python 3.5. The test cases can be found here and the results can be found here .
News
Date 	Update
2017-05-13 	Removed a bunch of older non-slim models. Moved the last bottleneck layer into the respective models. Corrected normalization of Center Loss.
2017-05-06 	Added code to train a classifier on your own images . Renamed facenet_train.py to train_tripletloss.py and facenet_train_classifier.py to train_softmax.py.
2017-03-02 	Added pretrained models that generate 128-dimensional embeddings.
2017-02-22 	Updated to Tensorflow r1.0. Added Continuous Integration using Travis-CI.
2017-02-03 	Added models where only trainable variables has been stored in the checkpoint. These are therefore significantly smaller.
2017-01-27 	Added a model trained on a subset of the MS-Celeb-1M dataset. The LFW accuracy of this model is around 0.994.
2017‑01‑02 	Updated to code to run with Tensorflow r0.12. Not sure if it runs with older versions of Tensorflow though.
Pre-trained models
Model name 	LFW accuracy 	Training dataset 	Architecture
20170511-185253 	0.987 	CASIA-WebFace 	Inception ResNet v1
20170512-110547 	0.992 	MS-Celeb-1M 	Inception ResNet v1
Inspiration

The code is heavily inspired by the OpenFace implementation.
Training data

The CASIA-WebFace dataset has been used for training. This training set consists of total of 453 453 images over 10 575 identities after face detection. Some performance improvement has been seen if the dataset has been filtered before training. Some more information about how this was done will come later. The best performing model has been trained on a subset of the MS-Celeb-1M dataset. This dataset is significantly larger but also contains significantly more label noise, and therefore it is crucial to apply dataset filtering on this dataset.
Pre-processing
Face alignment using MTCNN

One problem with the above approach seems to be that the Dlib face detector misses some of the hard examples (partial occlusion, silhouettes, etc). This makes the training set to "easy" which causes the model to perform worse on other benchmarks. To solve this, other face landmark detectors has been tested. One face landmark detector that has proven to work very well in this setting is the Multi-task CNN . A Matlab/Caffe implementation can be found here and this has been used for face alignment with very good results. A Python/Tensorflow implementation of MTCNN can be found here . This implementation does not give identical results to the Matlab/Caffe implementation but the performance is very similar.
Running training

Currently, the best results are achieved by training the model as a classifier with the addition of Center loss . Details on how to train a model as a classifier can be found on the page Classifier training of Inception-ResNet-v1 .
Pre-trained model
Inception-ResNet-v1 model

A couple of pretrained models are provided. They are trained using softmax loss with the Inception-Resnet-v1 model. The datasets has been aligned using MTCNN .
Performance

The accuracy on LFW for the model 20170512-110547 is 0.992+-0.003. A description of how to run the test can be found on the page Validate on LFW .

    © 2018 GitHub , Inc.
    Terms
    Privacy
    Security
    Status
    Help

    Contact GitHub
    API
    Training
    Shop
    Blog
    About

You can't perform that action at this time.
You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session.
Press h to open a hovercard with more details.
