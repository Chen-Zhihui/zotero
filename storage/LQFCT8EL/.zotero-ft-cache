
Skip to content
This repository

    Pull requests
    Issues
    Marketplace
    Explore

        New repository Import repository New gist New organization
        This repository
        New issue 
    @Chen-Zhihui
        Signed in as Chen-Zhihui
        Your profile
        Your stars
        Your gists
        Help
        Settings
        Sign out

Sign out

    Watch 85
    Notifications
    Not watching Be notified when participating or @mentioned. Watch
    Watching Be notified of all conversations. Unwatch
    Ignoring Never be notified. Stop ignoring
    Unstar 846
    Star 846
    Fork
    Where should we fork this repository?
    Loading
    114

google / upb
Code Issues 13 Pull requests 9 Projects 0 Wiki Insights
small, fast parsers for the 21st century

    793 commits
    6 branches
    0 releases
    10 contributors

    C 59.5%
    C++ 31.6%
    Lua 4.3%
    Ragel 2.8%
    Makefile 1.1%
    Shell 0.3%
    Other 0.4%

C C++ Lua Ragel Makefile Shell Other
Clone or download
Use SSH
Clone with HTTPS

Use Git or checkout with SVN using the web URL.
Use HTTPS
Clone with SSH

Use an SSH key and passphrase from account.
Download ZIP
Launching GitHub Desktop ...

If nothing happens, download GitHub Desktop and try again.

Go back
Launching GitHub Desktop ...

If nothing happens, download GitHub Desktop and try again.

Go back
Launching Xcode ...

If nothing happens, download Xcode and try again.

Go back
Launching Visual Studio ...

If nothing happens, download the GitHub extension for Visual Studio and try again.

Go back
Create new file
Upload files Find file
Branch: master
Switch branches/tags

    Branches
    Tags

cplusplus gencode gencode2 gh-pages master stringview
Nothing to show
Nothing to show
New pull request
Fetching latest commit…
Cannot retrieve the latest commit at this time.
Permalink
	Failed to load latest commit information.
	google/ protobuf 	Added google/protobuf/descriptor.upb.* to core. 	Mar 8, 2018
	tests 	Added google/protobuf/descriptor.upb.* to core. 	Mar 8, 2018
	third_party 	A good start on upb_encode and upb_decode. 	Jul 8, 2017
	tools 	Added google/protobuf/descriptor.upb.* to core. 	Mar 8, 2018
	upb 	Prepare upb_value for encoding/decoding map. 	Mar 12, 2018
	.gitignore 	Decoder bugfix, .gitignore update, and delete obsolete files. 	Dec 10, 2014
	.gitmodules 	A good start on upb_encode and upb_decode. 	Jul 8, 2017
	.travis.yml 	Fixed amalgamated build and added test. 	Jan 25, 2017
	CONTRIBUTING.md 	Brought into compliance with Google open-source policies. 	Jul 8, 2015
	DESIGN.md 	First version of a real C codegen for upb. 	Jul 5, 2017
	LICENSE 	Update copyright to be Google Inc. 	Mar 21, 2011
	Makefile 	Added google/protobuf/descriptor.upb.* to core. 	Mar 8, 2018
	README.md 	Update README.md 	Mar 12, 2018
	travis.sh 	Fixed amalgamated build and added test. 	Jan 25, 2017
README.md
Unleaded - small, fast parsers for the 21st century

Build Status Coverage Status

Unleaded is a library of fast parsers and serializers. These parsers/serializers are written in C and use every available avenue (particularly JIT compilation) to achieve the fastest possible speed. However they are also extremely lightweight (less than 100k of object code) and low-overhead.

The library started as a Protocol Buffers library (upb originally meant μpb: Micro Protocol Buffers). It still uses protobuf-like schemas as a core abstraction, but it has expanded beyond just Protocol Buffers to JSON, and other formats are planned.

The library itself is written in C, but very idiomatic APIs are provided for C++ and popular dynamic languages such as Lua. See the rest of this README for more information about these bindings.

Some parts of Unleaded are mature (most notably parsing of Protocol Buffers) but others are still immature or nonexistent. The core library abstractions are rapidly converging (this is saying a lot; it was a long road of about 5 years to make this happen), which should make it possible to begin building out the encoders and decoders in earnest.

API and ABI are both subject to change! Please do not distribute as a shared library for this reason (for now at least).
Building the core libraries

The core libraries are pure C99 and have no dependencies.

 $ make  

This will create a separate C library for each core library in lib/ . They are built separately to help your binaries slim, so you don't need to link in things you neither want or need.

Other useful targets:

 $ make tests $ make test  

How the library is organized

Unleaded tries to stay very small, but also aims to support lots of different formats. We reconcile these goals by being aggressively modular . The source tree and the build artifacts both reflect this organization:

    upb : the core library of handlers and defs (schemas)
    upb/pb : encoders/decoders for Protocol Buffers
    upb/json : encoders/decoders for JSON
    upb/descriptor : building upb defs from protobuf desciptors (ie. descriptor.proto)
    upb/bindings/googlepb : binding to the Google protobuf library.
    upb/bindings/lua : binding to the Lua C API (Lua and LuaJIT).
    more to come!

C and C++ API

The public C/C++ API is defined by all of the .h files in upb/ except .int.h files (which are internal-only).

The .h files define both C and C++ APIs. Both languages have 100% complete and first-class APIs. The C++ API is a wrapper around the C API, but all of the wrapping is done in inline methods in .h files, so there is no overhead to this.

For a more detailed description of the scheme we use to provide both C and C++ APIs, see: CAndCPlusPlusAPI .

All of the code that is under upb/ but not under upb/bindings/ forms the namespace of upb's cross-language public API. For example, the code in upb/descriptor would be exposed as follows:

    in C/C++: #include "upb/descriptor/X.h"
    in Lua: require "upb.descriptor"
    in Python: import upb.descriptor
    etc.

Google protobuf bindings

Unleaded supports integration with the Google protobuf library . These bindings let you:

    convert protobuf schema objects ( Descriptor , FieldDescriptor , etc). to their Unleaded equivalents ( upb::MessageDef , upb::FieldDef ).
    use Unleaded parsers to populate protobuf generated classes. Unleaded's parsers are much faster than protobuf's DynamicMessage . If you are generating C++ with the protobuf compiler, then protobuf's parsers are the same speed or a little faster than Unleaded in JIT mode, but Unleaded will have smaller binaries because you don't have to generate the code ahead of time.

To build the Google protobuf integration you must have the protobuf libraries already installed. Once they are installed run:

 $ make googlepb  

To test run:

 $ make googlepbtests $ make test  

Lua bindings

Lua bindings provide Unleaded's functionality to Lua programs. The bindings target Lua 5.1, Lua 5.2, LuaJIT, and (soon) Lua 5.3.

Right now the Lua bindings support:

    Building schema objects manually (eg. you can essentially write .proto files natively in Lua).
    creating message objects.
    parsing Protocol Buffers into message objects.

Other capabilities (parse/serialize JSON, serialize Protocol Buffers) are coming.

To build the Lua bindings, the Lua libraries must be installed. Once they are installed, run:

 $ make lua  

Note that if the Lua headers are not in a standard place, you may need to pass custom flags:

 $ make lua USER_CPPFLAGS=`pkg-config lua5.2 --cflags`  

To test the Lua bindings:

 $ make testlua  

Contact

Author: Josh Haberman ( jhaberman@gmail.com , haberman@google.com )

    © 2018 GitHub , Inc.
    Terms
    Privacy
    Security
    Status
    Help

    Contact GitHub
    API
    Training
    Shop
    Blog
    About

You can't perform that action at this time.
You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session.
Press h to open a hovercard with more details.
