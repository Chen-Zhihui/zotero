
Skip to content
This repository

    Pull requests
    Issues
    Marketplace
    Explore

        New repository Import repository New gist New organization
        This repository
        New issue 
    @Chen-Zhihui
        Signed in as Chen-Zhihui
        Your profile
        Your stars
        Your gists
        Help
        Settings
        Sign out

Sign out

    Watch 192
    Notifications
    Not watching Be notified when participating or @mentioned. Watch
    Watching Be notified of all conversations. Unwatch
    Ignoring Never be notified. Stop ignoring
    Unstar 3,308
    Star 3,308
    Fork
    Where should we fork this repository?
    Loading
    412

pybind / pybind11
Code Issues 141 Pull requests 48 Projects 0 Insights
Seamless operability between C++11 and Python

    1,499 commits
    6 branches
    17 releases
    81 contributors

    C++ 72.9%
    Python 22.6%
    CMake 4.3%
    Other 0.2%

C++ Python CMake Other
Clone or download
Use SSH
Clone with HTTPS

Use Git or checkout with SVN using the web URL.
Use HTTPS
Clone with SSH

Use an SSH key and passphrase from account.
Download ZIP
Launching GitHub Desktop ...

If nothing happens, download GitHub Desktop and try again.

Go back
Launching GitHub Desktop ...

If nothing happens, download GitHub Desktop and try again.

Go back
Launching Xcode ...

If nothing happens, download Xcode and try again.

Go back
Launching Visual Studio ...

If nothing happens, download the GitHub extension for Visual Studio and try again.

Go back
Create new file
Upload files Find file
Branch: master
Switch branches/tags

    Branches
    Tags

master stable v1.8 v2.0 v2.1 v2.2
Nothing to show
v2.2.2 v2.2.1 v2.2.0 v2.1.1 v2.1.0 v2.0.1 v2.0.0 v2.0.0-rc1 v1.8.1 v1.7 v1.6 v1.5 v1.4 v1.3 v1.2 v1.1 v1.0
Nothing to show
New pull request
Latest commit 6d0b470 Mar 11, 2018
@jagerman
jagerman Reimplement version check and combine init macros …

 This reimplements the version check to avoid sscanf (which has
reportedly started throwing warnings under MSVC, even when used
perfectly safely -- #1314 ).  It also extracts the mostly duplicated
parts of PYBIND11_MODULE/PYBIND11_PLUGIN into separate macros.

Permalink
	Failed to load latest commit information.
	docs 	Improve macro type handling for types with commas 	Mar 11, 2018
	include/ pybind11 	Reimplement version check and combine init macros 	Mar 11, 2018
	pybind11 	updated version flags for next version 	Aug 31, 2017
	tests 	Improve macro type handling for types with commas 	Mar 11, 2018
	tools 	misc. typos 	Jan 12, 2018
	.appveyor.yml 	Build /permissive- under VS2017 	Oct 23, 2017
	.gitignore 	add CMake exported interface library and Config detection file 	Dec 14, 2016
	.gitmodules 	Documentation extraction tool 	Jul 22, 2015
	.readthedocs.yml 	Fix readthedocs build ( #721 ) 	Mar 13, 2017
	.travis.yml 	Fix for Python3 via brew 	Mar 11, 2018
	CMakeLists.txt 	Add a dummy common.h header with a deprecation warning 	Sep 6, 2017
	CONTRIBUTING.md 	Moved section on licensing of contributions ( fixes #1109 ) ( #1188 ) 	Nov 18, 2017
	ISSUE_TEMPLATE.md 	Tweak GitHub issue template 	Jun 7, 2017
	LICENSE 	Moved section on licensing of contributions ( fixes #1109 ) ( #1188 ) 	Nov 18, 2017
	MANIFEST.in 	Fix setup.py detail headers and add pip install tests to Travis 	Aug 24, 2017
	README.md 	Use semi-constexpr signatures on MSVC 	Sep 16, 2017
	setup.cfg 	Trivial typos 	Nov 2, 2017
	setup.py 	Update PyPI URLs. 	Dec 24, 2017
README.md

pybind11 logo
pybind11 — Seamless operability between C++11 and Python

Documentation Status Documentation Status Gitter chat Build Status Build status

pybind11 is a lightweight header-only library that exposes C++ types in Python and vice versa, mainly to create Python bindings of existing C++ code. Its goals and syntax are similar to the excellent Boost.Python library by David Abrahams: to minimize boilerplate code in traditional extension modules by inferring type information using compile-time introspection.

The main issue with Boost.Python—and the reason for creating such a similar project—is Boost. Boost is an enormously large and complex suite of utility libraries that works with almost every C++ compiler in existence. This compatibility has its cost: arcane template tricks and workarounds are necessary to support the oldest and buggiest of compiler specimens. Now that C++11-compatible compilers are widely available, this heavy machinery has become an excessively large and unnecessary dependency.

Think of this library as a tiny self-contained version of Boost.Python with everything stripped away that isn't relevant for binding generation. Without comments, the core header files only require ~4K lines of code and depend on Python (2.7 or 3.x, or PyPy2.7 >= 5.7) and the C++ standard library. This compact implementation was possible thanks to some of the new C++11 language features (specifically: tuples, lambda functions and variadic templates). Since its creation, this library has grown beyond Boost.Python in many ways, leading to dramatically simpler binding code in many common situations.

Tutorial and reference documentation is provided at http://pybind11.readthedocs.org/en/master . A PDF version of the manual is available here .
Core features

pybind11 can map the following core C++ features to Python

    Functions accepting and returning custom data structures per value, reference, or pointer
    Instance methods and static methods
    Overloaded functions
    Instance attributes and static attributes
    Arbitrary exception types
    Enumerations
    Callbacks
    Iterators and ranges
    Custom operators
    Single and multiple inheritance
    STL data structures
    Iterators and ranges
    Smart pointers with reference counting like std::shared_ptr
    Internal references with correct reference counting
    C++ classes with virtual (and pure virtual) methods can be extended in Python

Goodies

In addition to the core functionality, pybind11 provides some extra goodies:

    Python 2.7, 3.x, and PyPy (PyPy2.7 >= 5.7) are supported with an implementation-agnostic interface.

    It is possible to bind C++11 lambda functions with captured variables. The lambda capture data is stored inside the resulting Python function object.

    pybind11 uses C++11 move constructors and move assignment operators whenever possible to efficiently transfer custom data types.

    It's easy to expose the internal storage of custom data types through Pythons' buffer protocols. This is handy e.g. for fast conversion between C++ matrix classes like Eigen and NumPy without expensive copy operations.

    pybind11 can automatically vectorize functions so that they are transparently applied to all entries of one or more NumPy array arguments.

    Python's slice-based access and assignment operations can be supported with just a few lines of code.

    Everything is contained in just a few header files; there is no need to link against any additional libraries.

    Binaries are generally smaller by a factor of at least 2 compared to equivalent bindings generated by Boost.Python. A recent pybind11 conversion of PyRosetta, an enormous Boost.Python binding project, reported a binary size reduction of 5.4x and compile time reduction by 5.8x .

    Function signatures are precomputed at compile time (using constexpr ), leading to smaller binaries.

    With little extra effort, C++ types can be pickled and unpickled similar to regular Python objects.

Supported compilers

    Clang/LLVM 3.3 or newer (for Apple Xcode's clang, this is 5.0.0 or newer)
    GCC 4.8 or newer
    Microsoft Visual Studio 2015 Update 3 or newer
    Intel C++ compiler 16 or newer (15 with a workaround )
    Cygwin/GCC (tested on 2.5.1)

About

This project was created by Wenzel Jakob . Significant features and/or improvements to the code were contributed by Jonas Adler, Sylvain Corlay, Trent Houliston, Axel Huebl, @hulucc, Sergey Lyskov Johan Mabille, Tomasz Miąsko, Dean Moldovan, Ben Pritchard, Jason Rhinelander, Boris Schäling, Pim Schellart, Ivan Smirnov, and Patrick Stewart.
License

pybind11 is provided under a BSD-style license that can be found in the LICENSE file. By using, distributing, or contributing to this project, you agree to the terms and conditions of this license.

    © 2018 GitHub , Inc.
    Terms
    Privacy
    Security
    Status
    Help

    Contact GitHub
    API
    Training
    Shop
    Blog
    About

You can't perform that action at this time.
You signed in with another tab or window. Reload to refresh your session. You signed out in another tab or window. Reload to refresh your session.
Press h to open a hovercard with more details.
